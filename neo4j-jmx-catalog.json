{
    "request": {
        "type": "list"
    },
    "status": 200,
    "timestamp": 1520026717,
    "value": {
        "JMImplementation": {
            "type=MBeanServerDelegate": {
                "attr": {
                    "ImplementationName": {
                        "desc": "The JMX implementation name (the name of this product)",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ImplementationVendor": {
                        "desc": "the JMX implementation vendor (the vendor of this product).",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ImplementationVersion": {
                        "desc": "The JMX implementation version (the version of this product).",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "MBeanServerId": {
                        "desc": "The MBean server agent identification",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "SpecificationName": {
                        "desc": "The full name of the JMX specification implemented by this product.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "SpecificationVendor": {
                        "desc": "The vendor of the JMX specification implemented by this product.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "SpecificationVersion": {
                        "desc": "The version of the JMX specification implemented by this product.",
                        "rw": false,
                        "type": "java.lang.String"
                    }
                },
                "class": "javax.management.MBeanServerDelegate",
                "desc": "Represents  the MBean server from the management point of view."
            }
        },
        "com.sun.management": {
            "type=DiagnosticCommand": {
                "class": "sun.management.DiagnosticCommandImpl",
                "desc": "Diagnostic Commands",
                "op": {
                    "gcClassHistogram": {
                        "args": [
                            {
                                "desc": "Array of Diagnostic Commands Arguments and Options",
                                "name": "arguments",
                                "type": "[Ljava.lang.String;"
                            }
                        ],
                        "desc": "Provide statistics about the Java heap usage.",
                        "ret": "java.lang.String"
                    },
                    "gcClassStats": {
                        "args": [
                            {
                                "desc": "Array of Diagnostic Commands Arguments and Options",
                                "name": "arguments",
                                "type": "[Ljava.lang.String;"
                            }
                        ],
                        "desc": "Provide statistics about Java class meta data. Requires -XX:+UnlockDiagnosticVMOptions.",
                        "ret": "java.lang.String"
                    },
                    "gcRotateLog": {
                        "args": [],
                        "desc": "Force the GC log file to be rotated.",
                        "ret": "java.lang.String"
                    },
                    "gcRun": {
                        "args": [],
                        "desc": "Call java.lang.System.gc().",
                        "ret": "java.lang.String"
                    },
                    "gcRunFinalization": {
                        "args": [],
                        "desc": "Call java.lang.System.runFinalization().",
                        "ret": "java.lang.String"
                    },
                    "help": {
                        "args": [
                            {
                                "desc": "Array of Diagnostic Commands Arguments and Options",
                                "name": "arguments",
                                "type": "[Ljava.lang.String;"
                            }
                        ],
                        "desc": "For more information about a specific command use 'help <command>'. With no argument this will show a list of available commands. 'help all' will show help for all commands.",
                        "ret": "java.lang.String"
                    },
                    "threadPrint": {
                        "args": [
                            {
                                "desc": "Array of Diagnostic Commands Arguments and Options",
                                "name": "arguments",
                                "type": "[Ljava.lang.String;"
                            }
                        ],
                        "desc": "Print all threads with stacktraces.",
                        "ret": "java.lang.String"
                    },
                    "vmCommandLine": {
                        "args": [],
                        "desc": "Print the command line used to start this VM instance.",
                        "ret": "java.lang.String"
                    },
                    "vmFlags": {
                        "args": [
                            {
                                "desc": "Array of Diagnostic Commands Arguments and Options",
                                "name": "arguments",
                                "type": "[Ljava.lang.String;"
                            }
                        ],
                        "desc": "Print VM flag options and their current values.",
                        "ret": "java.lang.String"
                    },
                    "vmNativeMemory": {
                        "args": [
                            {
                                "desc": "Array of Diagnostic Commands Arguments and Options",
                                "name": "arguments",
                                "type": "[Ljava.lang.String;"
                            }
                        ],
                        "desc": "Print native memory usage",
                        "ret": "java.lang.String"
                    },
                    "vmSystemProperties": {
                        "args": [],
                        "desc": "Print system properties.",
                        "ret": "java.lang.String"
                    },
                    "vmUptime": {
                        "args": [
                            {
                                "desc": "Array of Diagnostic Commands Arguments and Options",
                                "name": "arguments",
                                "type": "[Ljava.lang.String;"
                            }
                        ],
                        "desc": "Print VM uptime.",
                        "ret": "java.lang.String"
                    },
                    "vmVersion": {
                        "args": [],
                        "desc": "Print JVM version information.",
                        "ret": "java.lang.String"
                    }
                }
            },
            "type=HotSpotDiagnostic": {
                "attr": {
                    "DiagnosticOptions": {
                        "desc": "DiagnosticOptions",
                        "rw": false,
                        "type": "[Ljavax.management.openmbean.CompositeData;"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    }
                },
                "class": "sun.management.HotSpotDiagnostic",
                "desc": "Information on the management interface of the MBean",
                "op": {
                    "dumpHeap": {
                        "args": [
                            {
                                "desc": "p0",
                                "name": "p0",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "p1",
                                "name": "p1",
                                "type": "boolean"
                            }
                        ],
                        "desc": "dumpHeap",
                        "ret": "void"
                    },
                    "getVMOption": {
                        "args": [
                            {
                                "desc": "p0",
                                "name": "p0",
                                "type": "java.lang.String"
                            }
                        ],
                        "desc": "getVMOption",
                        "ret": "javax.management.openmbean.CompositeData"
                    },
                    "setVMOption": {
                        "args": [
                            {
                                "desc": "p0",
                                "name": "p0",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "p1",
                                "name": "p1",
                                "type": "java.lang.String"
                            }
                        ],
                        "desc": "setVMOption",
                        "ret": "void"
                    }
                }
            }
        },
        "java.lang": {
            "name=Code Cache,type=MemoryPool": {
                "attr": {
                    "CollectionUsage": {
                        "desc": "CollectionUsage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "CollectionUsageThreshold": {
                        "desc": "CollectionUsageThreshold",
                        "rw": true,
                        "type": "long"
                    },
                    "CollectionUsageThresholdCount": {
                        "desc": "CollectionUsageThresholdCount",
                        "rw": false,
                        "type": "long"
                    },
                    "CollectionUsageThresholdExceeded": {
                        "desc": "CollectionUsageThresholdExceeded",
                        "rw": false,
                        "type": "boolean"
                    },
                    "CollectionUsageThresholdSupported": {
                        "desc": "CollectionUsageThresholdSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "MemoryManagerNames": {
                        "desc": "MemoryManagerNames",
                        "rw": false,
                        "type": "[Ljava.lang.String;"
                    },
                    "Name": {
                        "desc": "Name",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "PeakUsage": {
                        "desc": "PeakUsage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "Type": {
                        "desc": "Type",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "Usage": {
                        "desc": "Usage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "UsageThreshold": {
                        "desc": "UsageThreshold",
                        "rw": true,
                        "type": "long"
                    },
                    "UsageThresholdCount": {
                        "desc": "UsageThresholdCount",
                        "rw": false,
                        "type": "long"
                    },
                    "UsageThresholdExceeded": {
                        "desc": "UsageThresholdExceeded",
                        "rw": false,
                        "type": "boolean"
                    },
                    "UsageThresholdSupported": {
                        "desc": "UsageThresholdSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "Valid": {
                        "desc": "Valid",
                        "rw": false,
                        "type": "boolean"
                    }
                },
                "class": "sun.management.MemoryPoolImpl",
                "desc": "Information on the management interface of the MBean",
                "op": {
                    "resetPeakUsage": {
                        "args": [],
                        "desc": "resetPeakUsage",
                        "ret": "void"
                    }
                }
            },
            "name=CodeCacheManager,type=MemoryManager": {
                "attr": {
                    "MemoryPoolNames": {
                        "desc": "MemoryPoolNames",
                        "rw": false,
                        "type": "[Ljava.lang.String;"
                    },
                    "Name": {
                        "desc": "Name",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "Valid": {
                        "desc": "Valid",
                        "rw": false,
                        "type": "boolean"
                    }
                },
                "class": "sun.management.MemoryManagerImpl",
                "desc": "Information on the management interface of the MBean"
            },
            "name=Compressed Class Space,type=MemoryPool": {
                "attr": {
                    "CollectionUsage": {
                        "desc": "CollectionUsage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "CollectionUsageThreshold": {
                        "desc": "CollectionUsageThreshold",
                        "rw": true,
                        "type": "long"
                    },
                    "CollectionUsageThresholdCount": {
                        "desc": "CollectionUsageThresholdCount",
                        "rw": false,
                        "type": "long"
                    },
                    "CollectionUsageThresholdExceeded": {
                        "desc": "CollectionUsageThresholdExceeded",
                        "rw": false,
                        "type": "boolean"
                    },
                    "CollectionUsageThresholdSupported": {
                        "desc": "CollectionUsageThresholdSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "MemoryManagerNames": {
                        "desc": "MemoryManagerNames",
                        "rw": false,
                        "type": "[Ljava.lang.String;"
                    },
                    "Name": {
                        "desc": "Name",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "PeakUsage": {
                        "desc": "PeakUsage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "Type": {
                        "desc": "Type",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "Usage": {
                        "desc": "Usage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "UsageThreshold": {
                        "desc": "UsageThreshold",
                        "rw": true,
                        "type": "long"
                    },
                    "UsageThresholdCount": {
                        "desc": "UsageThresholdCount",
                        "rw": false,
                        "type": "long"
                    },
                    "UsageThresholdExceeded": {
                        "desc": "UsageThresholdExceeded",
                        "rw": false,
                        "type": "boolean"
                    },
                    "UsageThresholdSupported": {
                        "desc": "UsageThresholdSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "Valid": {
                        "desc": "Valid",
                        "rw": false,
                        "type": "boolean"
                    }
                },
                "class": "sun.management.MemoryPoolImpl",
                "desc": "Information on the management interface of the MBean",
                "op": {
                    "resetPeakUsage": {
                        "args": [],
                        "desc": "resetPeakUsage",
                        "ret": "void"
                    }
                }
            },
            "name=G1 Eden Space,type=MemoryPool": {
                "attr": {
                    "CollectionUsage": {
                        "desc": "CollectionUsage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "CollectionUsageThreshold": {
                        "desc": "CollectionUsageThreshold",
                        "rw": true,
                        "type": "long"
                    },
                    "CollectionUsageThresholdCount": {
                        "desc": "CollectionUsageThresholdCount",
                        "rw": false,
                        "type": "long"
                    },
                    "CollectionUsageThresholdExceeded": {
                        "desc": "CollectionUsageThresholdExceeded",
                        "rw": false,
                        "type": "boolean"
                    },
                    "CollectionUsageThresholdSupported": {
                        "desc": "CollectionUsageThresholdSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "MemoryManagerNames": {
                        "desc": "MemoryManagerNames",
                        "rw": false,
                        "type": "[Ljava.lang.String;"
                    },
                    "Name": {
                        "desc": "Name",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "PeakUsage": {
                        "desc": "PeakUsage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "Type": {
                        "desc": "Type",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "Usage": {
                        "desc": "Usage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "UsageThreshold": {
                        "desc": "UsageThreshold",
                        "rw": true,
                        "type": "long"
                    },
                    "UsageThresholdCount": {
                        "desc": "UsageThresholdCount",
                        "rw": false,
                        "type": "long"
                    },
                    "UsageThresholdExceeded": {
                        "desc": "UsageThresholdExceeded",
                        "rw": false,
                        "type": "boolean"
                    },
                    "UsageThresholdSupported": {
                        "desc": "UsageThresholdSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "Valid": {
                        "desc": "Valid",
                        "rw": false,
                        "type": "boolean"
                    }
                },
                "class": "sun.management.MemoryPoolImpl",
                "desc": "Information on the management interface of the MBean",
                "op": {
                    "resetPeakUsage": {
                        "args": [],
                        "desc": "resetPeakUsage",
                        "ret": "void"
                    }
                }
            },
            "name=G1 Old Gen,type=MemoryPool": {
                "attr": {
                    "CollectionUsage": {
                        "desc": "CollectionUsage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "CollectionUsageThreshold": {
                        "desc": "CollectionUsageThreshold",
                        "rw": true,
                        "type": "long"
                    },
                    "CollectionUsageThresholdCount": {
                        "desc": "CollectionUsageThresholdCount",
                        "rw": false,
                        "type": "long"
                    },
                    "CollectionUsageThresholdExceeded": {
                        "desc": "CollectionUsageThresholdExceeded",
                        "rw": false,
                        "type": "boolean"
                    },
                    "CollectionUsageThresholdSupported": {
                        "desc": "CollectionUsageThresholdSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "MemoryManagerNames": {
                        "desc": "MemoryManagerNames",
                        "rw": false,
                        "type": "[Ljava.lang.String;"
                    },
                    "Name": {
                        "desc": "Name",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "PeakUsage": {
                        "desc": "PeakUsage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "Type": {
                        "desc": "Type",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "Usage": {
                        "desc": "Usage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "UsageThreshold": {
                        "desc": "UsageThreshold",
                        "rw": true,
                        "type": "long"
                    },
                    "UsageThresholdCount": {
                        "desc": "UsageThresholdCount",
                        "rw": false,
                        "type": "long"
                    },
                    "UsageThresholdExceeded": {
                        "desc": "UsageThresholdExceeded",
                        "rw": false,
                        "type": "boolean"
                    },
                    "UsageThresholdSupported": {
                        "desc": "UsageThresholdSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "Valid": {
                        "desc": "Valid",
                        "rw": false,
                        "type": "boolean"
                    }
                },
                "class": "sun.management.MemoryPoolImpl",
                "desc": "Information on the management interface of the MBean",
                "op": {
                    "resetPeakUsage": {
                        "args": [],
                        "desc": "resetPeakUsage",
                        "ret": "void"
                    }
                }
            },
            "name=G1 Old Generation,type=GarbageCollector": {
                "attr": {
                    "CollectionCount": {
                        "desc": "CollectionCount",
                        "rw": false,
                        "type": "long"
                    },
                    "CollectionTime": {
                        "desc": "CollectionTime",
                        "rw": false,
                        "type": "long"
                    },
                    "LastGcInfo": {
                        "desc": "LastGcInfo",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "MemoryPoolNames": {
                        "desc": "MemoryPoolNames",
                        "rw": false,
                        "type": "[Ljava.lang.String;"
                    },
                    "Name": {
                        "desc": "Name",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "Valid": {
                        "desc": "Valid",
                        "rw": false,
                        "type": "boolean"
                    }
                },
                "class": "sun.management.GarbageCollectorImpl",
                "desc": "Information on the management interface of the MBean"
            },
            "name=G1 Survivor Space,type=MemoryPool": {
                "attr": {
                    "CollectionUsage": {
                        "desc": "CollectionUsage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "CollectionUsageThreshold": {
                        "desc": "CollectionUsageThreshold",
                        "rw": true,
                        "type": "long"
                    },
                    "CollectionUsageThresholdCount": {
                        "desc": "CollectionUsageThresholdCount",
                        "rw": false,
                        "type": "long"
                    },
                    "CollectionUsageThresholdExceeded": {
                        "desc": "CollectionUsageThresholdExceeded",
                        "rw": false,
                        "type": "boolean"
                    },
                    "CollectionUsageThresholdSupported": {
                        "desc": "CollectionUsageThresholdSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "MemoryManagerNames": {
                        "desc": "MemoryManagerNames",
                        "rw": false,
                        "type": "[Ljava.lang.String;"
                    },
                    "Name": {
                        "desc": "Name",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "PeakUsage": {
                        "desc": "PeakUsage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "Type": {
                        "desc": "Type",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "Usage": {
                        "desc": "Usage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "UsageThreshold": {
                        "desc": "UsageThreshold",
                        "rw": true,
                        "type": "long"
                    },
                    "UsageThresholdCount": {
                        "desc": "UsageThresholdCount",
                        "rw": false,
                        "type": "long"
                    },
                    "UsageThresholdExceeded": {
                        "desc": "UsageThresholdExceeded",
                        "rw": false,
                        "type": "boolean"
                    },
                    "UsageThresholdSupported": {
                        "desc": "UsageThresholdSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "Valid": {
                        "desc": "Valid",
                        "rw": false,
                        "type": "boolean"
                    }
                },
                "class": "sun.management.MemoryPoolImpl",
                "desc": "Information on the management interface of the MBean",
                "op": {
                    "resetPeakUsage": {
                        "args": [],
                        "desc": "resetPeakUsage",
                        "ret": "void"
                    }
                }
            },
            "name=G1 Young Generation,type=GarbageCollector": {
                "attr": {
                    "CollectionCount": {
                        "desc": "CollectionCount",
                        "rw": false,
                        "type": "long"
                    },
                    "CollectionTime": {
                        "desc": "CollectionTime",
                        "rw": false,
                        "type": "long"
                    },
                    "LastGcInfo": {
                        "desc": "LastGcInfo",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "MemoryPoolNames": {
                        "desc": "MemoryPoolNames",
                        "rw": false,
                        "type": "[Ljava.lang.String;"
                    },
                    "Name": {
                        "desc": "Name",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "Valid": {
                        "desc": "Valid",
                        "rw": false,
                        "type": "boolean"
                    }
                },
                "class": "sun.management.GarbageCollectorImpl",
                "desc": "Information on the management interface of the MBean"
            },
            "name=Metaspace Manager,type=MemoryManager": {
                "attr": {
                    "MemoryPoolNames": {
                        "desc": "MemoryPoolNames",
                        "rw": false,
                        "type": "[Ljava.lang.String;"
                    },
                    "Name": {
                        "desc": "Name",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "Valid": {
                        "desc": "Valid",
                        "rw": false,
                        "type": "boolean"
                    }
                },
                "class": "sun.management.MemoryManagerImpl",
                "desc": "Information on the management interface of the MBean"
            },
            "name=Metaspace,type=MemoryPool": {
                "attr": {
                    "CollectionUsage": {
                        "desc": "CollectionUsage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "CollectionUsageThreshold": {
                        "desc": "CollectionUsageThreshold",
                        "rw": true,
                        "type": "long"
                    },
                    "CollectionUsageThresholdCount": {
                        "desc": "CollectionUsageThresholdCount",
                        "rw": false,
                        "type": "long"
                    },
                    "CollectionUsageThresholdExceeded": {
                        "desc": "CollectionUsageThresholdExceeded",
                        "rw": false,
                        "type": "boolean"
                    },
                    "CollectionUsageThresholdSupported": {
                        "desc": "CollectionUsageThresholdSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "MemoryManagerNames": {
                        "desc": "MemoryManagerNames",
                        "rw": false,
                        "type": "[Ljava.lang.String;"
                    },
                    "Name": {
                        "desc": "Name",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "PeakUsage": {
                        "desc": "PeakUsage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "Type": {
                        "desc": "Type",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "Usage": {
                        "desc": "Usage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "UsageThreshold": {
                        "desc": "UsageThreshold",
                        "rw": true,
                        "type": "long"
                    },
                    "UsageThresholdCount": {
                        "desc": "UsageThresholdCount",
                        "rw": false,
                        "type": "long"
                    },
                    "UsageThresholdExceeded": {
                        "desc": "UsageThresholdExceeded",
                        "rw": false,
                        "type": "boolean"
                    },
                    "UsageThresholdSupported": {
                        "desc": "UsageThresholdSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "Valid": {
                        "desc": "Valid",
                        "rw": false,
                        "type": "boolean"
                    }
                },
                "class": "sun.management.MemoryPoolImpl",
                "desc": "Information on the management interface of the MBean",
                "op": {
                    "resetPeakUsage": {
                        "args": [],
                        "desc": "resetPeakUsage",
                        "ret": "void"
                    }
                }
            },
            "type=ClassLoading": {
                "attr": {
                    "LoadedClassCount": {
                        "desc": "LoadedClassCount",
                        "rw": false,
                        "type": "int"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "TotalLoadedClassCount": {
                        "desc": "TotalLoadedClassCount",
                        "rw": false,
                        "type": "long"
                    },
                    "UnloadedClassCount": {
                        "desc": "UnloadedClassCount",
                        "rw": false,
                        "type": "long"
                    },
                    "Verbose": {
                        "desc": "Verbose",
                        "rw": true,
                        "type": "boolean"
                    }
                },
                "class": "sun.management.ClassLoadingImpl",
                "desc": "Information on the management interface of the MBean"
            },
            "type=Compilation": {
                "attr": {
                    "CompilationTimeMonitoringSupported": {
                        "desc": "CompilationTimeMonitoringSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "Name": {
                        "desc": "Name",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "TotalCompilationTime": {
                        "desc": "TotalCompilationTime",
                        "rw": false,
                        "type": "long"
                    }
                },
                "class": "sun.management.CompilationImpl",
                "desc": "Information on the management interface of the MBean"
            },
            "type=Memory": {
                "attr": {
                    "HeapMemoryUsage": {
                        "desc": "HeapMemoryUsage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "NonHeapMemoryUsage": {
                        "desc": "NonHeapMemoryUsage",
                        "rw": false,
                        "type": "javax.management.openmbean.CompositeData"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "ObjectPendingFinalizationCount": {
                        "desc": "ObjectPendingFinalizationCount",
                        "rw": false,
                        "type": "int"
                    },
                    "Verbose": {
                        "desc": "Verbose",
                        "rw": true,
                        "type": "boolean"
                    }
                },
                "class": "sun.management.MemoryImpl",
                "desc": "Information on the management interface of the MBean",
                "op": {
                    "gc": {
                        "args": [],
                        "desc": "gc",
                        "ret": "void"
                    }
                }
            },
            "type=OperatingSystem": {
                "attr": {
                    "Arch": {
                        "desc": "Arch",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "AvailableProcessors": {
                        "desc": "AvailableProcessors",
                        "rw": false,
                        "type": "int"
                    },
                    "CommittedVirtualMemorySize": {
                        "desc": "CommittedVirtualMemorySize",
                        "rw": false,
                        "type": "long"
                    },
                    "FreePhysicalMemorySize": {
                        "desc": "FreePhysicalMemorySize",
                        "rw": false,
                        "type": "long"
                    },
                    "FreeSwapSpaceSize": {
                        "desc": "FreeSwapSpaceSize",
                        "rw": false,
                        "type": "long"
                    },
                    "MaxFileDescriptorCount": {
                        "desc": "MaxFileDescriptorCount",
                        "rw": false,
                        "type": "long"
                    },
                    "Name": {
                        "desc": "Name",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "OpenFileDescriptorCount": {
                        "desc": "OpenFileDescriptorCount",
                        "rw": false,
                        "type": "long"
                    },
                    "ProcessCpuLoad": {
                        "desc": "ProcessCpuLoad",
                        "rw": false,
                        "type": "double"
                    },
                    "ProcessCpuTime": {
                        "desc": "ProcessCpuTime",
                        "rw": false,
                        "type": "long"
                    },
                    "SystemCpuLoad": {
                        "desc": "SystemCpuLoad",
                        "rw": false,
                        "type": "double"
                    },
                    "SystemLoadAverage": {
                        "desc": "SystemLoadAverage",
                        "rw": false,
                        "type": "double"
                    },
                    "TotalPhysicalMemorySize": {
                        "desc": "TotalPhysicalMemorySize",
                        "rw": false,
                        "type": "long"
                    },
                    "TotalSwapSpaceSize": {
                        "desc": "TotalSwapSpaceSize",
                        "rw": false,
                        "type": "long"
                    },
                    "Version": {
                        "desc": "Version",
                        "rw": false,
                        "type": "java.lang.String"
                    }
                },
                "class": "sun.management.OperatingSystemImpl",
                "desc": "Information on the management interface of the MBean"
            },
            "type=Runtime": {
                "attr": {
                    "BootClassPath": {
                        "desc": "BootClassPath",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "BootClassPathSupported": {
                        "desc": "BootClassPathSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "ClassPath": {
                        "desc": "ClassPath",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "InputArguments": {
                        "desc": "InputArguments",
                        "rw": false,
                        "type": "[Ljava.lang.String;"
                    },
                    "LibraryPath": {
                        "desc": "LibraryPath",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ManagementSpecVersion": {
                        "desc": "ManagementSpecVersion",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "Name": {
                        "desc": "Name",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "SpecName": {
                        "desc": "SpecName",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "SpecVendor": {
                        "desc": "SpecVendor",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "SpecVersion": {
                        "desc": "SpecVersion",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "StartTime": {
                        "desc": "StartTime",
                        "rw": false,
                        "type": "long"
                    },
                    "SystemProperties": {
                        "desc": "SystemProperties",
                        "rw": false,
                        "type": "javax.management.openmbean.TabularData"
                    },
                    "Uptime": {
                        "desc": "Uptime",
                        "rw": false,
                        "type": "long"
                    },
                    "VmName": {
                        "desc": "VmName",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "VmVendor": {
                        "desc": "VmVendor",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "VmVersion": {
                        "desc": "VmVersion",
                        "rw": false,
                        "type": "java.lang.String"
                    }
                },
                "class": "sun.management.RuntimeImpl",
                "desc": "Information on the management interface of the MBean"
            },
            "type=Threading": {
                "attr": {
                    "AllThreadIds": {
                        "desc": "AllThreadIds",
                        "rw": false,
                        "type": "[J"
                    },
                    "CurrentThreadCpuTime": {
                        "desc": "CurrentThreadCpuTime",
                        "rw": false,
                        "type": "long"
                    },
                    "CurrentThreadCpuTimeSupported": {
                        "desc": "CurrentThreadCpuTimeSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "CurrentThreadUserTime": {
                        "desc": "CurrentThreadUserTime",
                        "rw": false,
                        "type": "long"
                    },
                    "DaemonThreadCount": {
                        "desc": "DaemonThreadCount",
                        "rw": false,
                        "type": "int"
                    },
                    "ObjectMonitorUsageSupported": {
                        "desc": "ObjectMonitorUsageSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "PeakThreadCount": {
                        "desc": "PeakThreadCount",
                        "rw": false,
                        "type": "int"
                    },
                    "SynchronizerUsageSupported": {
                        "desc": "SynchronizerUsageSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "ThreadAllocatedMemoryEnabled": {
                        "desc": "ThreadAllocatedMemoryEnabled",
                        "rw": true,
                        "type": "boolean"
                    },
                    "ThreadAllocatedMemorySupported": {
                        "desc": "ThreadAllocatedMemorySupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "ThreadContentionMonitoringEnabled": {
                        "desc": "ThreadContentionMonitoringEnabled",
                        "rw": true,
                        "type": "boolean"
                    },
                    "ThreadContentionMonitoringSupported": {
                        "desc": "ThreadContentionMonitoringSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "ThreadCount": {
                        "desc": "ThreadCount",
                        "rw": false,
                        "type": "int"
                    },
                    "ThreadCpuTimeEnabled": {
                        "desc": "ThreadCpuTimeEnabled",
                        "rw": true,
                        "type": "boolean"
                    },
                    "ThreadCpuTimeSupported": {
                        "desc": "ThreadCpuTimeSupported",
                        "rw": false,
                        "type": "boolean"
                    },
                    "TotalStartedThreadCount": {
                        "desc": "TotalStartedThreadCount",
                        "rw": false,
                        "type": "long"
                    }
                },
                "class": "sun.management.ThreadImpl",
                "desc": "Information on the management interface of the MBean",
                "op": {
                    "dumpAllThreads": {
                        "args": [
                            {
                                "desc": "p0",
                                "name": "p0",
                                "type": "boolean"
                            },
                            {
                                "desc": "p1",
                                "name": "p1",
                                "type": "boolean"
                            }
                        ],
                        "desc": "dumpAllThreads",
                        "ret": "[Ljavax.management.openmbean.CompositeData;"
                    },
                    "findDeadlockedThreads": {
                        "args": [],
                        "desc": "findDeadlockedThreads",
                        "ret": "[J"
                    },
                    "findMonitorDeadlockedThreads": {
                        "args": [],
                        "desc": "findMonitorDeadlockedThreads",
                        "ret": "[J"
                    },
                    "getThreadAllocatedBytes": [
                        {
                            "args": [
                                {
                                    "desc": "p0",
                                    "name": "p0",
                                    "type": "[J"
                                }
                            ],
                            "desc": "getThreadAllocatedBytes",
                            "ret": "[J"
                        },
                        {
                            "args": [
                                {
                                    "desc": "p0",
                                    "name": "p0",
                                    "type": "long"
                                }
                            ],
                            "desc": "getThreadAllocatedBytes",
                            "ret": "long"
                        }
                    ],
                    "getThreadCpuTime": [
                        {
                            "args": [
                                {
                                    "desc": "p0",
                                    "name": "p0",
                                    "type": "[J"
                                }
                            ],
                            "desc": "getThreadCpuTime",
                            "ret": "[J"
                        },
                        {
                            "args": [
                                {
                                    "desc": "p0",
                                    "name": "p0",
                                    "type": "long"
                                }
                            ],
                            "desc": "getThreadCpuTime",
                            "ret": "long"
                        }
                    ],
                    "getThreadInfo": [
                        {
                            "args": [
                                {
                                    "desc": "p0",
                                    "name": "p0",
                                    "type": "[J"
                                },
                                {
                                    "desc": "p1",
                                    "name": "p1",
                                    "type": "int"
                                }
                            ],
                            "desc": "getThreadInfo",
                            "ret": "[Ljavax.management.openmbean.CompositeData;"
                        },
                        {
                            "args": [
                                {
                                    "desc": "p0",
                                    "name": "p0",
                                    "type": "long"
                                }
                            ],
                            "desc": "getThreadInfo",
                            "ret": "javax.management.openmbean.CompositeData"
                        },
                        {
                            "args": [
                                {
                                    "desc": "p0",
                                    "name": "p0",
                                    "type": "[J"
                                }
                            ],
                            "desc": "getThreadInfo",
                            "ret": "[Ljavax.management.openmbean.CompositeData;"
                        },
                        {
                            "args": [
                                {
                                    "desc": "p0",
                                    "name": "p0",
                                    "type": "long"
                                },
                                {
                                    "desc": "p1",
                                    "name": "p1",
                                    "type": "int"
                                }
                            ],
                            "desc": "getThreadInfo",
                            "ret": "javax.management.openmbean.CompositeData"
                        },
                        {
                            "args": [
                                {
                                    "desc": "p0",
                                    "name": "p0",
                                    "type": "[J"
                                },
                                {
                                    "desc": "p1",
                                    "name": "p1",
                                    "type": "boolean"
                                },
                                {
                                    "desc": "p2",
                                    "name": "p2",
                                    "type": "boolean"
                                }
                            ],
                            "desc": "getThreadInfo",
                            "ret": "[Ljavax.management.openmbean.CompositeData;"
                        }
                    ],
                    "getThreadUserTime": [
                        {
                            "args": [
                                {
                                    "desc": "p0",
                                    "name": "p0",
                                    "type": "[J"
                                }
                            ],
                            "desc": "getThreadUserTime",
                            "ret": "[J"
                        },
                        {
                            "args": [
                                {
                                    "desc": "p0",
                                    "name": "p0",
                                    "type": "long"
                                }
                            ],
                            "desc": "getThreadUserTime",
                            "ret": "long"
                        }
                    ],
                    "resetPeakThreadCount": {
                        "args": [],
                        "desc": "resetPeakThreadCount",
                        "ret": "void"
                    }
                }
            }
        },
        "java.nio": {
            "name=direct,type=BufferPool": {
                "attr": {
                    "Count": {
                        "desc": "Count",
                        "rw": false,
                        "type": "long"
                    },
                    "MemoryUsed": {
                        "desc": "MemoryUsed",
                        "rw": false,
                        "type": "long"
                    },
                    "Name": {
                        "desc": "Name",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "TotalCapacity": {
                        "desc": "TotalCapacity",
                        "rw": false,
                        "type": "long"
                    }
                },
                "class": "sun.management.ManagementFactoryHelper$1",
                "desc": "Information on the management interface of the MBean"
            },
            "name=mapped,type=BufferPool": {
                "attr": {
                    "Count": {
                        "desc": "Count",
                        "rw": false,
                        "type": "long"
                    },
                    "MemoryUsed": {
                        "desc": "MemoryUsed",
                        "rw": false,
                        "type": "long"
                    },
                    "Name": {
                        "desc": "Name",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "TotalCapacity": {
                        "desc": "TotalCapacity",
                        "rw": false,
                        "type": "long"
                    }
                },
                "class": "sun.management.ManagementFactoryHelper$1",
                "desc": "Information on the management interface of the MBean"
            }
        },
        "java.util.logging": {
            "type=Logging": {
                "attr": {
                    "LoggerNames": {
                        "desc": "LoggerNames",
                        "rw": false,
                        "type": "[Ljava.lang.String;"
                    },
                    "ObjectName": {
                        "desc": "ObjectName",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    }
                },
                "class": "sun.management.ManagementFactoryHelper$PlatformLoggingImpl",
                "desc": "Information on the management interface of the MBean",
                "op": {
                    "getLoggerLevel": {
                        "args": [
                            {
                                "desc": "p0",
                                "name": "p0",
                                "type": "java.lang.String"
                            }
                        ],
                        "desc": "getLoggerLevel",
                        "ret": "java.lang.String"
                    },
                    "getParentLoggerName": {
                        "args": [
                            {
                                "desc": "p0",
                                "name": "p0",
                                "type": "java.lang.String"
                            }
                        ],
                        "desc": "getParentLoggerName",
                        "ret": "java.lang.String"
                    },
                    "setLoggerLevel": {
                        "args": [
                            {
                                "desc": "p0",
                                "name": "p0",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "p1",
                                "name": "p1",
                                "type": "java.lang.String"
                            }
                        ],
                        "desc": "setLoggerLevel",
                        "ret": "void"
                    }
                }
            }
        },
        "jmx4perl": {
            "type=Config": {
                "attr": {
                    "Debug": {
                        "desc": "Attribute exposed for management",
                        "rw": true,
                        "type": "boolean"
                    },
                    "HistoryMaxEntries": {
                        "desc": "Attribute exposed for management",
                        "rw": true,
                        "type": "int"
                    },
                    "HistorySize": {
                        "desc": "Attribute exposed for management",
                        "rw": false,
                        "type": "int"
                    },
                    "MaxDebugEntries": {
                        "desc": "Attribute exposed for management",
                        "rw": true,
                        "type": "int"
                    }
                },
                "class": "org.jolokia.backend.Config",
                "desc": "Information on the management interface of the MBean",
                "op": {
                    "debugInfo": {
                        "args": [],
                        "desc": "Operation exposed for management",
                        "ret": "java.lang.String"
                    },
                    "resetDebugInfo": {
                        "args": [],
                        "desc": "Operation exposed for management",
                        "ret": "void"
                    },
                    "resetHistoryEntries": {
                        "args": [],
                        "desc": "Operation exposed for management",
                        "ret": "void"
                    },
                    "setHistoryEntriesForAttribute": {
                        "args": [
                            {
                                "desc": "",
                                "name": "p1",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p2",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p3",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p4",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p5",
                                "type": "int"
                            }
                        ],
                        "desc": "Operation exposed for management",
                        "ret": "void"
                    },
                    "setHistoryEntriesForOperation": {
                        "args": [
                            {
                                "desc": "",
                                "name": "p1",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p2",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p3",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p4",
                                "type": "int"
                            }
                        ],
                        "desc": "Operation exposed for management",
                        "ret": "void"
                    },
                    "setHistoryLimitForAttribute": {
                        "args": [
                            {
                                "desc": "",
                                "name": "p1",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p2",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p3",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p4",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p5",
                                "type": "int"
                            },
                            {
                                "desc": "",
                                "name": "p6",
                                "type": "long"
                            }
                        ],
                        "desc": "Operation exposed for management",
                        "ret": "void"
                    },
                    "setHistoryLimitForOperation": {
                        "args": [
                            {
                                "desc": "",
                                "name": "p1",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p2",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p3",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p4",
                                "type": "int"
                            },
                            {
                                "desc": "",
                                "name": "p5",
                                "type": "long"
                            }
                        ],
                        "desc": "Operation exposed for management",
                        "ret": "void"
                    }
                }
            }
        },
        "jolokia": {
            "type=Config": {
                "attr": {
                    "Debug": {
                        "desc": "Attribute exposed for management",
                        "rw": true,
                        "type": "boolean"
                    },
                    "HistoryMaxEntries": {
                        "desc": "Attribute exposed for management",
                        "rw": true,
                        "type": "int"
                    },
                    "HistorySize": {
                        "desc": "Attribute exposed for management",
                        "rw": false,
                        "type": "int"
                    },
                    "MaxDebugEntries": {
                        "desc": "Attribute exposed for management",
                        "rw": true,
                        "type": "int"
                    }
                },
                "class": "org.jolokia.backend.Config",
                "desc": "Information on the management interface of the MBean",
                "op": {
                    "debugInfo": {
                        "args": [],
                        "desc": "Operation exposed for management",
                        "ret": "java.lang.String"
                    },
                    "resetDebugInfo": {
                        "args": [],
                        "desc": "Operation exposed for management",
                        "ret": "void"
                    },
                    "resetHistoryEntries": {
                        "args": [],
                        "desc": "Operation exposed for management",
                        "ret": "void"
                    },
                    "setHistoryEntriesForAttribute": {
                        "args": [
                            {
                                "desc": "",
                                "name": "p1",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p2",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p3",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p4",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p5",
                                "type": "int"
                            }
                        ],
                        "desc": "Operation exposed for management",
                        "ret": "void"
                    },
                    "setHistoryEntriesForOperation": {
                        "args": [
                            {
                                "desc": "",
                                "name": "p1",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p2",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p3",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p4",
                                "type": "int"
                            }
                        ],
                        "desc": "Operation exposed for management",
                        "ret": "void"
                    },
                    "setHistoryLimitForAttribute": {
                        "args": [
                            {
                                "desc": "",
                                "name": "p1",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p2",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p3",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p4",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p5",
                                "type": "int"
                            },
                            {
                                "desc": "",
                                "name": "p6",
                                "type": "long"
                            }
                        ],
                        "desc": "Operation exposed for management",
                        "ret": "void"
                    },
                    "setHistoryLimitForOperation": {
                        "args": [
                            {
                                "desc": "",
                                "name": "p1",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p2",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p3",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "",
                                "name": "p4",
                                "type": "int"
                            },
                            {
                                "desc": "",
                                "name": "p5",
                                "type": "long"
                            }
                        ],
                        "desc": "Operation exposed for management",
                        "ret": "void"
                    }
                }
            },
            "type=Discovery": {
                "class": "org.jolokia.discovery.JolokiaDiscovery",
                "desc": "Information on the management interface of the MBean",
                "op": {
                    "lookupAgents": {
                        "args": [],
                        "desc": "Operation exposed for management",
                        "ret": "java.util.List"
                    },
                    "lookupAgentsWithTimeout": {
                        "args": [
                            {
                                "desc": "",
                                "name": "p1",
                                "type": "int"
                            }
                        ],
                        "desc": "Operation exposed for management",
                        "ret": "java.util.List"
                    }
                }
            },
            "type=ServerHandler": {
                "class": "org.jolokia.backend.MBeanServerHandler",
                "desc": "Information on the management interface of the MBean",
                "op": {
                    "mBeanServersInfo": {
                        "args": [],
                        "desc": "Operation exposed for management",
                        "ret": "java.lang.String"
                    }
                }
            }
        },
        "org.neo4j": {
            "instance=kernel#0,name=Configuration": {
                "attr": {
                    "bolt.ssl_policy": {
                        "desc": "Specify the SSL policy to use",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "browser.allow_outgoing_connections": {
                        "desc": "Configure the policy for outgoing Neo4j Browser connections.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "browser.credential_timeout": {
                        "desc": "Configure the Neo4j Browser to time out logged in users after this idle period. Setting this to 0 indicates no limit.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "browser.post_connect_cmd": {
                        "desc": "Commands to be run when Neo4j Browser successfully connects to this server. Separate multiple commands with semi-colon.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "browser.remote_content_hostname_whitelist": {
                        "desc": "Whitelist of hosts for the Neo4j Browser to be allowed to fetch content from.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "browser.retain_connection_credentials": {
                        "desc": "Configure the Neo4j Browser to store or not store user credentials.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.array_block_id_allocation_size": {
                        "desc": "The size of the ID allocation requests Core servers will make when they run out of ARRAY_BLOCK IDs. Larger values mean less frequent requests but also result in more unused IDs (and unused disk space) in the event of a crash.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.catch_up_client_inactivity_timeout": {
                        "desc": "The catch up protocol times out if the given duration elapses with no network activity. Every message received by the client from the server extends the time out duration.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.catchup_batch_size": {
                        "desc": "The maximum batch size when catching up (in unit of entries)",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.cluster_allow_reads_on_followers": {
                        "desc": "Configure if the `dbms.cluster.routing.getServers()` procedure should include followers as read endpoints or return only read replicas. Note: if there are no read replicas in the cluster, followers are returned as read end points regardless the value of this setting. Defaults to true so that followers are available for read-only queries in a typical heterogeneous setup.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.cluster_routing_ttl": {
                        "desc": "How long drivers should cache the data from the `dbms.cluster.routing.getServers()` procedure.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.cluster_topology_refresh": {
                        "desc": "Time between scanning the cluster to refresh current server's view of topology",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.connect-randomly-to-server-group": {
                        "desc": "Comma separated list of groups to be used by the connect-randomly-to-server-group selection strategy. The connect-randomly-to-server-group strategy is used if the list of strategies (`causal_clustering.upstream_selection_strategy`) includes the value `connect-randomly-to-server-group`. ",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.disable_middleware_logging": {
                        "desc": "Prevents the network middleware from dumping its own logs. Defaults to true.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.discovery_advertised_address": {
                        "desc": "Advertised cluster member discovery management communication.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.discovery_listen_address": {
                        "desc": "Host and port to bind the cluster member discovery management communication.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.discovery_type": {
                        "desc": "Configure the discovery type used for cluster name resolution",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.enable_pre_voting": {
                        "desc": "Enable pre-voting extension to the Raft protocol (this is breaking and must match between the core cluster members)",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.expected_core_cluster_size": {
                        "desc": "Expected number of Core machines in the cluster",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.global_session_tracker_state_size": {
                        "desc": "The maximum file size before the global session tracker state file is rotated (in unit of entries)",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.id_alloc_state_size": {
                        "desc": "The maximum file size before the ID allocation file is rotated (in unit of entries)",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.in_flight_cache.max_bytes": {
                        "desc": "The maximum number of bytes in the in-flight cache.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.in_flight_cache.max_entries": {
                        "desc": "The maximum number of entries in the in-flight cache.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.in_flight_cache.type": {
                        "desc": "Type of in-flight cache.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.initial_discovery_members": {
                        "desc": "A comma-separated list of other members of the cluster to join.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.join_catch_up_timeout": {
                        "desc": "Time out for a new member to catch up",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.label_token_id_allocation_size": {
                        "desc": "The size of the ID allocation requests Core servers will make when they run out of LABEL_TOKEN IDs. Larger values mean less frequent requests but also result in more unused IDs (and unused disk space) in the event of a crash.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.label_token_name_id_allocation_size": {
                        "desc": "The size of the ID allocation requests Core servers will make when they run out of LABEL_TOKEN_NAME IDs. Larger values mean less frequent requests but also result in more unused IDs (and unused disk space) in the event of a crash.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.last_applied_state_size": {
                        "desc": "The maximum file size before the storage file is rotated (in unit of entries)",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.leader_election_timeout": {
                        "desc": "The time limit within which a new leader election will occur if no messages are received.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.load_balancing.config": {
                        "desc": "The configuration must be valid for the configured plugin and usually existsunder matching subkeys, e.g. ..config.server_policies.*This is just a top-level placeholder for the plugin-specific configuration.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.load_balancing.plugin": {
                        "desc": "The load balancing plugin to use.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.load_balancing.shuffle": {
                        "desc": "Enables shuffling of the returned load balancing result.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.log_shipping_max_lag": {
                        "desc": "The maximum lag allowed before log shipping pauses (in unit of entries)",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.middleware_logging.level": {
                        "desc": "The level of middleware logging",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.multi_dc_license": {
                        "desc": "Enable multi-data center features. Requires appropriate licensing.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.neostore_block_id_allocation_size": {
                        "desc": "The size of the ID allocation requests Core servers will make when they run out of NEOSTORE_BLOCK IDs. Larger values mean less frequent requests but also result in more unused IDs (and unused disk space) in the event of a crash.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.node_id_allocation_size": {
                        "desc": "The size of the ID allocation requests Core servers will make when they run out of NODE IDs. Larger values mean less frequent requests but also result in more unused IDs (and unused disk space) in the event of a crash.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.node_labels_id_allocation_size": {
                        "desc": "The size of the ID allocation requests Core servers will make when they run out of NODE_LABELS IDs. Larger values mean less frequent requests but also result in more unused IDs (and unused disk space) in the event of a crash.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.property_id_allocation_size": {
                        "desc": "The size of the ID allocation requests Core servers will make when they run out of PROPERTY IDs. Larger values mean less frequent requests but also result in more unused IDs (and unused disk space) in the event of a crash.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.property_key_token_id_allocation_size": {
                        "desc": "The size of the ID allocation requests Core servers will make when they run out of PROPERTY_KEY_TOKEN IDs. Larger values mean less frequent requests but also result in more unused IDs (and unused disk space) in the event of a crash.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.property_key_token_name_id_allocation_size": {
                        "desc": "The size of the ID allocation requests Core servers will make when they run out of PROPERTY_KEY_TOKEN_NAME IDs. Larger values mean less frequent requests but also result in more unused IDs (and unused disk space) in the event of a crash.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.pull_interval": {
                        "desc": "Interval of pulling updates from cores.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.raft_advertised_address": {
                        "desc": "Advertised hostname/IP address and port for the RAFT server.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.raft_in_queue_max_batch": {
                        "desc": "Largest batch processed by RAFT",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.raft_in_queue_size": {
                        "desc": "Size of the RAFT in queue",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.raft_listen_address": {
                        "desc": "Network interface and port for the RAFT server to listen on.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.raft_log_implementation": {
                        "desc": "RAFT log implementation",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.raft_log_prune_strategy": {
                        "desc": "RAFT log pruning strategy",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.raft_log_pruning_frequency": {
                        "desc": "RAFT log pruning frequency",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.raft_log_reader_pool_size": {
                        "desc": "RAFT log reader pool size",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.raft_log_rotation_size": {
                        "desc": "RAFT log rotation size",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.raft_membership_state_size": {
                        "desc": "The maximum file size before the membership state file is rotated (in unit of entries)",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.raft_messages_log_enable": {
                        "desc": "Enable or disable the dump of all network messages pertaining to the RAFT protocol",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.raft_messages_log_path": {
                        "desc": "Path to RAFT messages log.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.raft_term_state_size": {
                        "desc": "The maximum file size before the term state file is rotated (in unit of entries)",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.raft_vote_state_size": {
                        "desc": "The maximum file size before the vote state file is rotated (in unit of entries)",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.read_replica_time_to_live": {
                        "desc": "Time To Live before read replica is considered unavailable",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.read_replica_transaction_applier_batch_size": {
                        "desc": "Maximum transaction batch size for read replicas when applying transactions pulled from core servers.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.refuse_to_be_leader": {
                        "desc": "Prevents the current instance from volunteering to become Raft leader. Defaults to false, and should only be used in exceptional circumstances by expert users. Using this can result in reduced availability for the cluster.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.relationship_group_id_allocation_size": {
                        "desc": "The size of the ID allocation requests Core servers will make when they run out of RELATIONSHIP_GROUP IDs. Larger values mean less frequent requests but also result in more unused IDs (and unused disk space) in the event of a crash.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.relationship_id_allocation_size": {
                        "desc": "The size of the ID allocation requests Core servers will make when they run out of RELATIONSHIP IDs. Larger values mean less frequent requests but also result in more unused IDs (and unused disk space) in the event of a crash.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.relationship_type_token_id_allocation_size": {
                        "desc": "The size of the ID allocation requests Core servers will make when they run out of RELATIONSHIP_TYPE_TOKEN IDs. Larger values mean less frequent requests but also result in more unused IDs (and unused disk space) in the event of a crash.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.relationship_type_token_name_id_allocation_size": {
                        "desc": "The size of the ID allocation requests Core servers will make when they run out of RELATIONSHIP_TYPE_TOKEN_NAME IDs. Larger values mean less frequent requests but also result in more unused IDs (and unused disk space) in the event of a crash.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.replicated_lock_token_state_size": {
                        "desc": "The maximum file size before the replicated lock token state file is rotated (in unit of entries)",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.replication_leader": {
                        "desc": "The retry timeout for finding a leader for replication. Relevant during leader elections.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.replication_retry_timeout_base": {
                        "desc": "The initial timeout until replication is retried. The timeout will increase exponentially.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.replication_retry_timeout_limit": {
                        "desc": "The upper limit for the exponentially incremented retry timeout.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.replication_total_size_limit": {
                        "desc": "The maximum amount of data which can be in the replication stage concurrently.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.schema_id_allocation_size": {
                        "desc": "The size of the ID allocation requests Core servers will make when they run out of SCHEMA IDs. Larger values mean less frequent requests but also result in more unused IDs (and unused disk space) in the event of a crash.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.server_groups": {
                        "desc": "A list of group names for the server used when configuring load balancing and replication policies.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.ssl_policy": {
                        "desc": "Name of the SSL policy to be used by the clustering, as defined under the dbms.ssl.policy.* settings. If no policy is configured then the communication will not be secured.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.state_machine_apply_max_batch_size": {
                        "desc": "The maximum number of operations to be batched during applications of operations in the state machines",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.state_machine_flush_window_size": {
                        "desc": "The number of operations to be processed before the state machines flush to disk",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.string_block_id_allocation_size": {
                        "desc": "The size of the ID allocation requests Core servers will make when they run out of STRING_BLOCK IDs. Larger values mean less frequent requests but also result in more unused IDs (and unused disk space) in the event of a crash.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.transaction_advertised_address": {
                        "desc": "Advertised hostname/IP address and port for the transaction shipping server.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.transaction_listen_address": {
                        "desc": "Network interface and port for the transaction shipping server to listen on.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.unknown_address_logging_throttle": {
                        "desc": "Throttle limit for logging unknown cluster member address",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.upstream_selection_strategy": {
                        "desc": "An ordered list in descending preference of the strategy which read replicas use to choose the upstream server from which to pull transactional updates.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "causal_clustering.user_defined_upstream_strategy": {
                        "desc": "Configuration of a user-defined upstream selection strategy. The user-defined strategy is used if the list of strategies (`causal_clustering.upstream_selection_strategy`) includes the value `user_defined`. ",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "cypher.default_language_version": {
                        "desc": "Set this to specify the default parser (language version).",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "cypher.forbid_exhaustive_shortestpath": {
                        "desc": "This setting is associated with performance optimization. Set this to `true` in situations where it is preferable to have any queries using the 'shortestPath' function terminate as soon as possible with no answer, rather than potentially running for a long time attempting to find an answer (even if there is no path to be found). For most queries, the 'shortestPath' algorithm will return the correct answer very quickly. However there are some cases where it is possible that the fast bidirectional breadth-first search algorithm will find no results even if they exist. This can happen when the predicates in the `WHERE` clause applied to 'shortestPath' cannot be applied to each step of the traversal, and can only be applied to the entire path. When the query planner detects these special cases, it will plan to perform an exhaustive depth-first search if the fast algorithm finds no paths. However, the exhaustive search may be orders of magnitude slower than the fast algorithm. If it is critical that queries terminate as soon as possible, it is recommended that this option be set to `true`, which means that Neo4j will never consider using the exhaustive search for shortestPath queries. However, please note that if no paths are found, an error will be thrown at run time, which will need to be handled by the application.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "cypher.forbid_shortestpath_common_nodes": {
                        "desc": "This setting is associated with performance optimization. The shortest path algorithm does not work when the start and end nodes are the same. With this setting set to `false` no path will be returned when that happens. The default value of `true` will instead throw an exception. This can happen if you perform a shortestPath search after a cartesian product that might have the same start and end nodes for some of the rows passed to shortestPath. If it is preferable to not experience this exception, and acceptable for results to be missing for those rows, then set this to `false`. If you cannot accept missing results, and really want the shortestPath between two common nodes, then re-write the query using a standard Cypher variable length pattern expression followed by ordering by path length and limiting to one result.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "cypher.hints_error": {
                        "desc": "Set this to specify the behavior when Cypher planner or runtime hints cannot be fulfilled. If true, then non-conformance will result in an error, otherwise only a warning is generated.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "cypher.min_replan_interval": {
                        "desc": "The minimum time between possible cypher query replanning events. After this time, the graph statistics will be evaluated, and if they have changed by more than the value set by cypher.statistics_divergence_threshold, the query will be replanned. If the statistics have not changed sufficiently, the same interval will need to pass before the statistics will be evaluated again.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "cypher.planner": {
                        "desc": "Set this to specify the default planner for the default language version.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "cypher.statistics_divergence_threshold": {
                        "desc": "The threshold when a plan is considered stale. If any of the underlying statistics used to create the plan have changed more than this value, the plan will be considered stale and will be replanned. Change is calculated as abs(a-b)/max(a,b). This means that a value of 0.75 requires the database to approximately quadruple in size. A value of 0 means always replan, and 1 means never replan.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.active_database": {
                        "desc": "Name of the database to load",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.allow_format_migration": {
                        "desc": "Whether to allow a store upgrade in case the current version of the database starts against an older store version. Setting this to `true` does not guarantee successful upgrade, it just allows an upgrade to be performed.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.allow_upgrade": {
                        "desc": "Whether to allow an upgrade in case the current version of the database starts against an older version.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.auto_index.nodes.enabled": {
                        "desc": "Controls the auto indexing feature for nodes. Setting it to `false` shuts it down, while `true` enables it by default for properties listed in the dbms.auto_index.nodes.keys setting.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.auto_index.nodes.keys": {
                        "desc": "A list of property names (comma separated) that will be indexed by default. This applies to _nodes_ only.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.auto_index.relationships.enabled": {
                        "desc": "Controls the auto indexing feature for relationships. Setting it to `false` shuts it down, while `true` enables it by default for properties listed in the dbms.auto_index.relationships.keys setting.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.auto_index.relationships.keys": {
                        "desc": "A list of property names (comma separated) that will be indexed by default. This applies to _relationships_ only.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.backup.address": {
                        "desc": "Listening server for online backups",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.backup.enabled": {
                        "desc": "Enable support for running online backups",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.checkpoint": {
                        "desc": "Configures the general policy for when check-points should occur. The default policy is the 'periodic' check-point policy, as specified by the 'dbms.checkpoint.interval.tx' and 'dbms.checkpoint.interval.time' settings. The Neo4j Enterprise Edition provides two alternative policies: The first is the 'continuous' check-point policy, which will ignore those settings and run the check-point process all the time. The second is the 'volumetric' check-point policy, which makes a best-effort at check-pointing often enough so that the database doesn't get too far behind on deleting old transaction logs in accordance with the 'dbms.tx_log.rotation.retention_policy' setting.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.checkpoint.interval.time": {
                        "desc": "Configures the time interval between check-points. The database will not check-point more often than this (unless check pointing is triggered by a different event), but might check-point less often than this interval, if performing a check-point takes longer time than the configured interval. A check-point is a point in the transaction logs, from which recovery would start from. Longer check-point intervals typically means that recovery will take longer to complete in case of a crash. On the other hand, a longer check-point interval can also reduce the I/O load that the database places on the system, as each check-point implies a flushing and forcing of all the store files.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.checkpoint.interval.tx": {
                        "desc": "Configures the transaction interval between check-points. The database will not check-point more often  than this (unless check pointing is triggered by a different event), but might check-point less often than this interval, if performing a check-point takes longer time than the configured interval. A check-point is a point in the transaction logs, from which recovery would start from. Longer check-point intervals typically means that recovery will take longer to complete in case of a crash. On the other hand, a longer check-point interval can also reduce the I/O load that the database places on the system, as each check-point implies a flushing and forcing of all the store files.  The default is '100000' for a check-point every 100000 transactions.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.checkpoint.iops.limit": {
                        "desc": "Limit the number of IOs the background checkpoint process will consume per second. This setting is advisory, is ignored in Neo4j Community Edition, and is followed to best effort in Enterprise Edition. An IO is in this case a 8 KiB (mostly sequential) write. Limiting the write IO in this way will leave more bandwidth in the IO subsystem to service random-read IOs, which is important for the response time of queries when the database cannot fit entirely in memory. The only drawback of this setting is that longer checkpoint times may lead to slightly longer recovery times in case of a database or system crash. A lower number means lower IO pressure, and consequently longer checkpoint times. The configuration can also be commented out to remove the limitation entirely, and let the checkpointer flush data as fast as the hardware will go. Set this to -1 to disable the IOPS limit.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.config.strict_validation": {
                        "desc": "A strict configuration validation will prevent the database from starting up if unknown configuration options are specified in the neo4j settings namespace (such as dbms., ha., cypher., etc). This is currently false by default but will be true by default in 4.0.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.connector.bolt.enabled": {
                        "desc": "Enable this connector.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.connector.http.enabled": {
                        "desc": "Enable this connector.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.connector.https.enabled": {
                        "desc": "Enable this connector.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.connectors.default_advertised_address": {
                        "desc": "Default hostname or IP address the server uses to advertise itself to its connectors. To advertise a specific hostname or IP address for a specific connector, specify the +advertised_address+ property for the specific connector.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.connectors.default_listen_address": {
                        "desc": "Default network interface to listen for incoming connections. To listen for connections on all interfaces, use \"0.0.0.0\". To bind specific connectors to a specific network interfaces, specify the +listen_address+ properties for the specific connector.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.directories.certificates": {
                        "desc": "Directory for storing certificates to be used by Neo4j for TLS connections",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.directories.data": {
                        "desc": "Path of the data directory. You must not configure more than one Neo4j installation to use the same data directory.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.directories.import": {
                        "desc": "Sets the root directory for file URLs used with the Cypher `LOAD CSV` clause. This must be set to a single directory, restricting access to only those files within that directory and its subdirectories.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.directories.lib": {
                        "desc": "Path of the lib directory",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.directories.logs": {
                        "desc": "Path of the logs directory.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.directories.metrics": {
                        "desc": "The target location of the CSV files: a path to a directory wherein a CSV file per reported field  will be written.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.directories.plugins": {
                        "desc": "Location of the database plugin directory. Compiled Java JAR files that contain database procedures will be loaded if they are placed in this directory.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.directories.run": {
                        "desc": "Path of the run directory. This directory holds Neo4j's runtime state, such as a pidfile when it is running in the background. The pidfile is created when starting neo4j and removed when stopping it. It may be placed on an in-memory filesystem such as tmpfs.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.ids.reuse.types.override": {
                        "desc": "Specified names of id types (comma separated) that should be reused. Currently only 'node' and 'relationship' types are supported. ",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.import.csv.legacy_quote_escaping": {
                        "desc": "Selects whether to conform to the standard https://tools.ietf.org/html/rfc4180 for interpreting escaped quotation characters in CSV files loaded using `LOAD CSV`. Setting this to `false` will use the standard, interpreting repeated quotes '\"\"' as a single in-lined quote, while `true` will use the legacy convention originally supported in Neo4j 3.0 and 3.1, allowing a backslash to include quotes in-lined in fields.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.index_sampling.background_enabled": {
                        "desc": "Enable or disable background index sampling",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.index_sampling.buffer_size": {
                        "desc": "Size of buffer used by index sampling. This configuration setting is no longer applicable as from Neo4j 3.0.3. Please use dbms.index_sampling.sample_size_limit instead.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.index_sampling.sample_size_limit": {
                        "desc": "Index sampling chunk size limit",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.index_sampling.update_percentage": {
                        "desc": "Percentage of index updates of total index size required before sampling of a given index is triggered",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.index_searcher_cache_size": {
                        "desc": "The maximum number of open Lucene index searchers.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.jvm.additional": {
                        "desc": "Additional JVM arguments.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.label_index": {
                        "desc": "Backend to use for label --> nodes index",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.lock.acquisition.timeout": {
                        "desc": "The maximum time interval within which lock should be acquired.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.debug.level": {
                        "desc": "Debug log level threshold.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.debug.path": {
                        "desc": "Path to the debug log file.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.debug.rotation.delay": {
                        "desc": "Minimum time interval after last rotation of the debug log before it may be rotated again.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.debug.rotation.keep_number": {
                        "desc": "Maximum number of history files for the debug log.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.debug.rotation.size": {
                        "desc": "Threshold for rotation of the debug log.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.gc.enabled": {
                        "desc": "Enable GC Logging",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.gc.options": {
                        "desc": "GC Logging Options",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.gc.rotation.keep_number": {
                        "desc": "Number of GC logs to keep.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.gc.rotation.size": {
                        "desc": "Size of each GC log that is kept.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.http.enabled": {
                        "desc": "Enable HTTP request logging.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.http.path": {
                        "desc": "Path to HTTP request log.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.http.rotation.keep_number": {
                        "desc": "Number of HTTP logs to keep.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.http.rotation.size": {
                        "desc": "Size of each HTTP log that is kept.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.query.allocation_logging_enabled": {
                        "desc": "Log allocated bytes for the executed queries being logged. The logged number is cumulative over the duration of the query, i.e. for memory intense or long-running queries the value may be larger than the current memory allocation.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.query.enabled": {
                        "desc": "Log executed queries that take longer than the configured threshold, dbms.logs.query.threshold. Log entries are by default written to the file _query.log_ located in the Logs directory. For location of the Logs directory, see <<file-locations>>. This feature is available in the Neo4j Enterprise Edition.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.query.page_logging_enabled": {
                        "desc": "Log page hits and page faults for the executed queries being logged.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.query.parameter_logging_enabled": {
                        "desc": "Log parameters for the executed queries being logged.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.query.path": {
                        "desc": "Path to the query log file.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.query.rotation.keep_number": {
                        "desc": "Maximum number of history files for the query log.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.query.rotation.size": {
                        "desc": "The file size in bytes at which the query log will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.query.threshold": {
                        "desc": "If the execution of query takes more time than this threshold, the query is logged - provided query logging is enabled. Defaults to 0 seconds, that is all queries are logged.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.query.time_logging_enabled": {
                        "desc": "Log detailed time information for the executed queries being logged.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.security.level": {
                        "desc": "Security log level threshold.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.security.path": {
                        "desc": "Path to the security log file.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.security.rotation.delay": {
                        "desc": "Minimum time interval after last rotation of the security log before it may be rotated again.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.security.rotation.keep_number": {
                        "desc": "Maximum number of history files for the security log.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.security.rotation.size": {
                        "desc": "Threshold for rotation of the security log.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.logs.timezone": {
                        "desc": "Database logs timezone.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.memory.heap.initial_size": {
                        "desc": "Initial heap size. By default it is calculated based on available system resources.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.memory.heap.max_size": {
                        "desc": "Maximum heap size. By default it is calculated based on available system resources.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.memory.pagecache.size": {
                        "desc": "The amount of memory to use for mapping the store files, in bytes (or kilobytes with the 'k' suffix, megabytes with 'm' and gigabytes with 'g'). If Neo4j is running on a dedicated server, then it is generally recommended to leave about 2-4 gigabytes for the operating system, give the JVM enough heap to hold all your transaction state and query context, and then leave the rest for the page cache. If no page cache memory is configured, then a heuristic setting is computed based on available system resources.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.memory.pagecache.swapper": {
                        "desc": "Specify which page swapper to use for doing paged IO. This is only used when integrating with proprietary storage technology.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.mode": {
                        "desc": "Configure the operating mode of the database -- 'SINGLE' for stand-alone operation, 'HA' for operating as a member in an HA cluster, 'ARBITER' for a cluster member with no database in an HA cluster, 'CORE' for operating as a core member of a Causal Cluster, or 'READ_REPLICA' for operating as a read replica member of a Causal Cluster.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.procedures.kill_query_verbose": {
                        "desc": "Specifies whether or not dbms.killQueries produces a verbose output, with information about which queries were not found",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.query_cache_size": {
                        "desc": "The number of Cypher query execution plans that are cached.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.read_only": {
                        "desc": "Only allow read operations from this Neo4j instance. This mode still requires write access to the directory for lock purposes.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.record_format": {
                        "desc": "Database record format. Valid values: `standard`, `high_limit`. The `high_limit` format\u00a0is available for Enterprise Edition only. It is required if you have a graph that is larger than 34 billion nodes, 34 billion relationships, or 68 billion properties. A change of the record format is irreversible. Certain operations may suffer from a performance penalty of up to 10%, which is why this format is not switched on by default.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.relationship_grouping_threshold": {
                        "desc": "Relationship count threshold for considering a node to be dense",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.rest.transaction.idle_timeout": {
                        "desc": "Timeout for idle transactions in the REST endpoint.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.allow_csv_import_from_file_urls": {
                        "desc": "Determines if Cypher will allow using file URLs when loading data using `LOAD CSV`. Setting this value to `false` will cause Neo4j to fail `LOAD CSV` clauses that load data from the file system.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.auth_cache_max_capacity": {
                        "desc": "The maximum capacity for authentication and authorization caches (respectively).",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.auth_cache_ttl": {
                        "desc": "The time to live (TTL) for cached authentication and authorization info when using external auth providers (LDAP or plugin). Setting the TTL to 0 will disable auth caching. Disabling caching while using the LDAP auth provider requires the use of an LDAP system account for resolving authorization information.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.auth_cache_use_ttl": {
                        "desc": "Enable time-based eviction of the authentication and authorization info cache for external auth providers (LDAP or plugin). Disabling this setting will make the cache live forever and only be evicted when `dbms.security.auth_cache_max_capacity` is exceeded.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.auth_enabled": {
                        "desc": "Enable auth requirement to access Neo4j.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.auth_provider": {
                        "desc": "The authentication and authorization provider that contains both the users and roles. This can be one of the built-in `native` or `ldap` providers, or it can be an externally provided plugin, with a custom name prefixed by `plugin-`, i.e. `plugin-<AUTH_PROVIDER_NAME>`.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.auth_providers": {
                        "desc": "A list of security authentication and authorization providers containing the users and roles. They will be queried in the given order when login is attempted.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.causal_clustering_status_auth_enabled": {
                        "desc": "Require authorization for access to the Causal Clustering status endpoints.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ha_status_auth_enabled": {
                        "desc": "Require authorization for access to the HA status endpoints.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.http_authorization_classes": {
                        "desc": "Comma-seperated list of custom security rules for Neo4j to use.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.authentication.cache_enabled": {
                        "desc": "Determines if the result of authentication via the LDAP server should be cached or not. Caching is used to limit the number of LDAP requests that have to be made over the network for users that have already been authenticated successfully. A user can be authenticated against an existing cache entry (instead of via an LDAP server) as long as it is alive (see `dbms.security.auth_cache_ttl`).\nAn important consequence of setting this to `true` is that Neo4j then needs to cache a hashed version of the credentials in order to perform credentials matching. This hashing is done using a cryptographic hash function together with a random salt. Preferably a conscious decision should be made if this method is considered acceptable by the security standards of the organization in which this Neo4j instance is deployed.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.authentication.mechanism": {
                        "desc": "LDAP authentication mechanism. This is one of `simple` or a SASL mechanism supported by JNDI, for example `DIGEST-MD5`. `simple` is basic username and password authentication and SASL is used for more advanced mechanisms. See RFC 2251 LDAPv3 documentation for more details.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.authentication.use_samaccountname": {
                        "desc": "Perform authentication with sAMAccountName instead of DN.\nUsing this setting requires `dbms.security.ldap.authorization.system_username` and dbms.security.ldap.authorization.system_password to be used since there is no way to log in through ldap directly with the sAMAccountName, instead the login name will be resolved to a DN that will be used to log in with.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.authentication.user_dn_template": {
                        "desc": "LDAP user DN template. An LDAP object is referenced by its distinguished name (DN), and a user DN is an LDAP fully-qualified unique user identifier. This setting is used to generate an LDAP DN that conforms with the LDAP directory's schema from the user principal that is submitted with the authentication token when logging in. The special token {0} is a placeholder where the user principal will be substituted into the DN string.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.authentication_enabled": {
                        "desc": "Enable authentication via settings configurable LDAP authentication provider.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.authorization.group_membership_attributes": {
                        "desc": "A list of attribute names on a user object that contains groups to be used for mapping to roles when LDAP authorization is enabled.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.authorization.group_to_role_mapping": {
                        "desc": "An authorization mapping from LDAP group names to Neo4j role names. The map should be formatted as a semicolon separated list of key-value pairs, where the key is the LDAP group name and the value is a comma separated list of corresponding role names. For example: group1=role1;group2=role2;group3=role3,role4,role5\n\nYou could also use whitespaces and quotes around group names to make this mapping more readable, for example: dbms.security.ldap.authorization.group_to_role_mapping=\\\n         \"cn=Neo4j Read Only,cn=users,dc=example,dc=com\"      = reader;    \\\n         \"cn=Neo4j Read-Write,cn=users,dc=example,dc=com\"     = publisher; \\\n         \"cn=Neo4j Schema Manager,cn=users,dc=example,dc=com\" = architect; \\\n         \"cn=Neo4j Administrator,cn=users,dc=example,dc=com\"  = admin",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.authorization.system_password": {
                        "desc": "An LDAP system account password to use for authorization searches when `dbms.security.ldap.authorization.use_system_account` is `true`.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.authorization.system_username": {
                        "desc": "An LDAP system account username to use for authorization searches when `dbms.security.ldap.authorization.use_system_account` is `true`. Note that the `dbms.security.ldap.authentication.user_dn_template` will not be applied to this username, so you may have to specify a full DN.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.authorization.use_system_account": {
                        "desc": "Perform LDAP search for authorization info using a system account instead of the user's own account.\n\nIf this is set to `false` (default), the search for group membership will be performed directly after authentication using the LDAP context bound with the user's own account. The mapped roles will be cached for the duration of `dbms.security.auth_cache_ttl`, and then expire, requiring re-authentication. To avoid frequently having to re-authenticate sessions you may want to set a relatively long auth cache expiration time together with this option. NOTE: This option will only work if the users are permitted to search for their own group membership attributes in the directory.\n\nIf this is set to `true`, the search will be performed using a special system account user with read access to all the users in the directory. You need to specify the username and password using the settings `dbms.security.ldap.authorization.system_username` and `dbms.security.ldap.authorization.system_password` with this option. Note that this account only needs read access to the relevant parts of the LDAP directory and does not need to have access rights to Neo4j, or any other systems.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.authorization.user_search_base": {
                        "desc": "The name of the base object or named context to search for user objects when LDAP authorization is enabled. A common case is that this matches the last part of `dbms.security.ldap.authentication.user_dn_template`.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.authorization.user_search_filter": {
                        "desc": "The LDAP search filter to search for a user principal when LDAP authorization is enabled. The filter should contain the placeholder token {0} which will be substituted for the user principal.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.authorization_enabled": {
                        "desc": "Enable authorization via settings configurable LDAP authorization provider.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.connection_timeout": {
                        "desc": "The timeout for establishing an LDAP connection. If a connection with the LDAP server cannot be established within the given time the attempt is aborted. A value of 0 means to use the network protocol's (i.e., TCP's) timeout value.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.host": {
                        "desc": "URL of LDAP server to use for authentication and authorization. The format of the setting is `<protocol>://<hostname>:<port>`, where hostname is the only required field. The supported values for protocol are `ldap` (default) and `ldaps`. The default port for `ldap` is 389 and for `ldaps` 636. For example: `ldaps://ldap.example.com:10389`.\n\nNOTE: You may want to consider using STARTTLS (`dbms.security.ldap.use_starttls`) instead of LDAPS for secure connections, in which case the correct protocol is `ldap`.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.read_timeout": {
                        "desc": "The timeout for an LDAP read request (i.e. search). If the LDAP server does not respond within the given time the request will be aborted. A value of 0 means wait for a response indefinitely.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.referral": {
                        "desc": "The LDAP referral behavior when creating a connection. This is one of `follow`, `ignore` or `throw`.\n* `follow` automatically follows any referrals\n* `ignore` ignores any referrals\n* `throw` throws an exception, which will lead to authentication failure",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.ldap.use_starttls": {
                        "desc": "Use secure communication with the LDAP server using opportunistic TLS. First an initial insecure connection will be made with the LDAP server, and a STARTTLS command will be issued to negotiate an upgrade of the connection to TLS before initiating authentication.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.log_successful_authentication": {
                        "desc": "Set to log successful authentication events to the security log. If this is set to `false` only failed authentication events will be logged, which could be useful if you find that the successful events spam the logs too much, and you do not require full auditing capability.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.native.authentication_enabled": {
                        "desc": "Enable authentication via native authentication provider.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.native.authorization_enabled": {
                        "desc": "Enable authorization via native authorization provider.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.plugin.authentication_enabled": {
                        "desc": "Enable authentication via plugin authentication providers.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.plugin.authorization_enabled": {
                        "desc": "Enable authorization via plugin authorization providers.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.procedures.default_allowed": {
                        "desc": "The default role that can execute all procedures and user-defined functions that are not covered by the `dbms.security.procedures.roles` setting. If the `dbms.security.procedures.default_allowed` setting is the empty string (default), procedures will be executed according to the same security rules as normal Cypher statements.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.procedures.roles": {
                        "desc": "This provides a finer level of control over which roles can execute procedures than the `dbms.security.procedures.default_allowed` setting. For example: `dbms.security.procedures.roles=apoc.convert.*:reader;apoc.load.json*:writer;apoc.trigger.add:TriggerHappy` will allow the role `reader` to execute all procedures in the `apoc.convert` namespace, the role `writer` to execute all procedures in the `apoc.load` namespace that starts with `json` and the role `TriggerHappy` to execute the specific procedure `apoc.trigger.add`. Procedures not matching any of these patterns will be subject to the `dbms.security.procedures.default_allowed` setting.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.procedures.unrestricted": {
                        "desc": "A list of procedures and user defined functions (comma separated) that are allowed full access to the database. The list may contain both fully-qualified procedure names, and partial names with the wildcard '*'. Note that this enables these procedures to bypass security. Use with caution.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.security.procedures.whitelist": {
                        "desc": "A list of procedures (comma separated) that are to be loaded. The list may contain both fully-qualified procedure names, and partial names with the wildcard '*'. If this setting is left empty no procedures will be loaded.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.shell.enabled": {
                        "desc": "Enable a remote shell server which Neo4j Shell clients can log in to. Only applicable to `neo4j-shell`.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.shell.host": {
                        "desc": "Remote host for shell. By default, the shell server listens only on the loopback interface, but you can specify the IP address of any network interface or use `0.0.0.0` for all interfaces. Only applicable to `neo4j-shell`.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.shell.port": {
                        "desc": "The port the shell will listen on. Only applicable to `neo4j-shell`.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.shell.read_only": {
                        "desc": "Read only mode. Will only allow read operations. Only applicable to `neo4j-shell`.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.shell.rmi_name": {
                        "desc": "The name of the shell. Only applicable to `neo4j-shell`.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.shutdown_transaction_end_timeout": {
                        "desc": "The maximum amount of time to wait for running transactions to complete before allowing initiated database shutdown to continue",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.threads.worker_count": {
                        "desc": "Number of Neo4j worker threads, your OS might enforce a lower limit than the maximum value specified here.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.track_query_allocation": {
                        "desc": "Enables or disables tracking of how many bytes are allocated by the execution of a query.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.track_query_cpu_time": {
                        "desc": "Enables or disables tracking of how much time a query spends actively executing on the CPU.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.transaction.bookmark_ready_timeout": {
                        "desc": "The maximum amount of time to wait for the database state represented by the bookmark.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.transaction.monitor.check.interval": {
                        "desc": "Configures the time interval between transaction monitor checks. Determines how often monitor thread will check transaction for timeout.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.transaction.timeout": {
                        "desc": "The maximum time interval of a transaction within which it should be completed.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.tx_log.rotation.retention_policy": {
                        "desc": "Make Neo4j keep the logical transaction logs for being able to backup the database. Can be used for specifying the threshold to prune logical logs after. For example \"10 days\" will prune logical logs that only contains transactions older than 10 days from the current time, or \"100k txs\" will keep the 100k latest transactions and prune any older transactions.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.tx_log.rotation.size": {
                        "desc": "Specifies at which file size the logical log will auto-rotate. Minimum accepted value is 1M. ",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.udc.enabled": {
                        "desc": "Enable the UDC extension.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.unmanaged_extension_classes": {
                        "desc": "Comma-separated list of <classname>=<mount point> for unmanaged extensions.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "dbms.windows_service_name": {
                        "desc": "Name of the Windows Service.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.allow_init_cluster": {
                        "desc": "Whether to allow this instance to create a cluster if unable to join.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.branched_data_copying_strategy": {
                        "desc": "Strategy for how to order handling of branched data on slaves and copying of the store from the master. The default is copy_then_branch, which, when combined with the keep_last or keep_none branch handling strategies results in a safer branching strategy, as there is always a store present so store failure to copy a store (for example, because of network failure) does not leave the instance without a store.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.branched_data_policy": {
                        "desc": "Policy for how to handle branched data.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.broadcast_timeout": {
                        "desc": "Timeout for broadcasting values in cluster. Must consider end-to-end duration of Paxos algorithm. This value is the default value for the ha.join_timeout and ha.leave_timeout settings.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.configuration_timeout": {
                        "desc": "Timeout for waiting for configuration from an existing cluster member during cluster join.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.data_chunk_size": {
                        "desc": "Max size of the data chunks that flows between master and slaves in HA. Bigger size may increase throughput, but may also be more sensitive to variations in bandwidth, whereas lower size increases tolerance for bandwidth variations.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.default_timeout": {
                        "desc": "Default timeout used for clustering timeouts. Override  specific timeout settings with proper values if necessary. This value is the default value for the ha.heartbeat_interval, ha.paxos_timeout and ha.learn_timeout settings.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.election_timeout": {
                        "desc": "Timeout for waiting for other members to finish a role election. Defaults to ha.paxos_timeout.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.heartbeat_interval": {
                        "desc": "How often heartbeat messages should be sent. Defaults to ha.default_timeout.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.heartbeat_timeout": {
                        "desc": "How long to wait for heartbeats from other instances before marking them as suspects for failure. This value reflects considerations of network latency, expected duration of garbage collection pauses and other factors that can delay message sending and processing. Larger values will result in more stable masters but also will result in longer waits before a failover in case of master failure. This value should not be set to less than twice the ha.heartbeat_interval value otherwise there is a high risk of frequent master switches and possibly branched data occurrence.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.host.coordination": {
                        "desc": "Host and port to bind the cluster management communication.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.host.data": {
                        "desc": "Hostname and port to bind the HA server.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.initial_hosts": {
                        "desc": "A comma-separated list of other members of the cluster to join.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.internal_role_switch_timeout": {
                        "desc": "Timeout for waiting for internal conditions during state switch, like for transactions to complete, before switching to master or slave.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.join_timeout": {
                        "desc": "Timeout for joining a cluster. Defaults to ha.broadcast_timeout. Note that if the timeout expires during cluster formation, the operator may have to restart the instance or instances.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.learn_timeout": {
                        "desc": "Timeout for learning values. Defaults to ha.default_timeout.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.leave_timeout": {
                        "desc": "Timeout for waiting for cluster leave to finish. Defaults to ha.broadcast_timeout.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.max_acceptors": {
                        "desc": "Maximum number of servers to involve when agreeing to membership changes. In very large clusters, the probability of half the cluster failing is low, but protecting against any arbitrary half failing is expensive. Therefore you may wish to set this parameter to a value less than the cluster size.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.max_channels_per_slave": {
                        "desc": "Maximum number of connections a slave can have to the master.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.paxos_timeout": {
                        "desc": "Default value for all Paxos timeouts. This setting controls the default value for the ha.phase1_timeout, ha.phase2_timeout and ha.election_timeout settings. If it is not given a value it defaults to ha.default_timeout and will implicitly change if ha.default_timeout changes. This is an advanced parameter which should only be changed if specifically advised by Neo4j Professional Services.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.phase1_timeout": {
                        "desc": "Timeout for Paxos phase 1. If it is not given a value it defaults to ha.paxos_timeout and will implicitly change if ha.paxos_timeout changes. This is an advanced parameter which should only be changed if specifically advised by Neo4j Professional Services. ",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.phase2_timeout": {
                        "desc": "Timeout for Paxos phase 2. If it is not given a value it defaults to ha.paxos_timeout and will implicitly change if ha.paxos_timeout changes. This is an advanced parameter which should only be changed if specifically advised by Neo4j Professional Services. ",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.pull_batch_size": {
                        "desc": "Size of batches of transactions applied on slaves when pulling from master",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.pull_interval": {
                        "desc": "Interval of pulling updates from master.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.role_switch_timeout": {
                        "desc": "Timeout for request threads waiting for instance to become master or slave.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.server_id": {
                        "desc": "Id for a cluster instance. Must be unique within the cluster.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.slave_lock_timeout": {
                        "desc": "Timeout for taking remote (write) locks on slaves. Defaults to ha.slave_read_timeout.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.slave_only": {
                        "desc": "Whether this instance should only participate as slave in cluster. If set to `true`, it will never be elected as master.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.slave_read_timeout": {
                        "desc": "How long a slave will wait for response from master before giving up.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.strict_initial_hosts": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.tx_push_factor": {
                        "desc": "The amount of slaves the master will ask to replicate a committed transaction. ",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "ha.tx_push_strategy": {
                        "desc": "Push strategy of a transaction to a slave during commit.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "hazelcast.license_key": {
                        "desc": "Hazelcast license key",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "https.ssl_policy": {
                        "desc": "SSL policy name.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.bolt.messages.enabled": {
                        "desc": "Enable reporting metrics about Bolt Protocol message processing.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.csv.enabled": {
                        "desc": "Set to `true` to enable exporting metrics to CSV files",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.csv.interval": {
                        "desc": "The reporting interval for the CSV files. That is, how often new rows with numbers are appended to the CSV files.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.cypher.replanning.enabled": {
                        "desc": "Enable reporting metrics about number of occurred replanning events.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.enabled": {
                        "desc": "The default enablement value for all the supported metrics. Set this to `false` to turn off all metrics by default. The individual settings can then be used to selectively re-enable specific metrics.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.graphite.enabled": {
                        "desc": "Set to `true` to enable exporting metrics to Graphite.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.graphite.interval": {
                        "desc": "The reporting interval for Graphite. That is, how often to send updated metrics to Graphite.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.graphite.server": {
                        "desc": "The hostname or IP address of the Graphite server",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.jvm.buffers.enabled": {
                        "desc": "Enable reporting metrics about the buffer pools.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.jvm.gc.enabled": {
                        "desc": "Enable reporting metrics about the duration of garbage collections",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.jvm.memory.enabled": {
                        "desc": "Enable reporting metrics about the memory usage.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.jvm.threads.enabled": {
                        "desc": "Enable reporting metrics about the current number of threads running.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.neo4j.causal_clustering.enabled": {
                        "desc": "Enable reporting metrics about Causal Clustering mode.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.neo4j.checkpointing.enabled": {
                        "desc": "Enable reporting metrics about Neo4j check pointing; when it occurs and how much time it takes to complete.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.neo4j.cluster.enabled": {
                        "desc": "Enable reporting metrics about HA cluster info.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.neo4j.counts.enabled": {
                        "desc": "Enable reporting metrics about approximately how many entities are in the database; nodes, relationships, properties, etc.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.neo4j.enabled": {
                        "desc": "The default enablement value for all Neo4j specific support metrics. Set this to `false` to turn off all Neo4j specific metrics by default. The individual `metrics.neo4j.*` metrics can then be turned on selectively.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.neo4j.logrotation.enabled": {
                        "desc": "Enable reporting metrics about the Neo4j log rotation; when it occurs and how much time it takes to complete.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.neo4j.network.enabled": {
                        "desc": "Enable reporting metrics about the network usage.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.neo4j.pagecache.enabled": {
                        "desc": "Enable reporting metrics about the Neo4j page cache; page faults, evictions, flushes, exceptions, etc.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.neo4j.server.enabled": {
                        "desc": "Enable reporting metrics about Server threading info.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.neo4j.tx.enabled": {
                        "desc": "Enable reporting metrics about transactions; number of transactions started, committed, etc.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "metrics.prefix": {
                        "desc": "A common prefix for the reported metrics field names. By default, this is either be 'neo4j', or a computed value based on the cluster and instance names, when running in an HA configuration.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "tools.consistency_checker.check_graph": {
                        "desc": "This setting is deprecated. See commandline arguments for neoj4-admin check-consistency instead. Perform checks between nodes, relationships, properties, types and tokens.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "tools.consistency_checker.check_indexes": {
                        "desc": "This setting is deprecated. See commandline arguments for neoj4-admin check-consistency instead. Perform checks on indexes. Checking indexes is more expensive than checking the native stores, so it may be useful to turn off this check for very large databases.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "tools.consistency_checker.check_label_scan_store": {
                        "desc": "This setting is deprecated. See commandline arguments for neoj4-admin check-consistency instead. Perform checks on the label scan store. Checking this store is more expensive than checking the native stores, so it may be useful to turn off this check for very large databases.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "tools.consistency_checker.check_property_owners": {
                        "desc": "This setting is deprecated. See commandline arguments for neoj4-admin check-consistency instead. Perform optional additional checking on property ownership. This can detect a theoretical inconsistency where a property could be owned by multiple entities. However, the check is very expensive in time and memory, so it is skipped by default.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.cypher.compiler_tracing": {
                        "desc": "Enable tracing of compilation in cypher.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.cypher.idp_solver_duration_threshold": {
                        "desc": "To improve IDP query planning time, we can restrict the internal planning loop duration, triggering more frequent compaction of candidate plans. The smaller the threshold the faster the planning, but the higher the risk of sub-optimal plans.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.cypher.idp_solver_table_threshold": {
                        "desc": "To improve IDP query planning time, we can restrict the internal planning table size, triggering compaction of candidate plans. The smaller the threshold the faster the planning, but the higher the risk of sub-optimal plans.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.cypher.non_indexed_label_warning_threshold": {
                        "desc": "The threshold when a warning is generated if a label scan is done after a load csv where the label has no index",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.cypher.replan_algorithm": {
                        "desc": "Large databases might change slowly, and to prevent queries from never being replanned the divergence threshold set by cypher.statistics_divergence_threshold is configured to shrink over time using the algorithm set here. This will cause the threshold to reach the value set by unsupported.cypher.statistics_divergence_target once the time since the previous replanning has reached the value set in unsupported.cypher.target_replan_interval. Setting the algorithm to 'none' will cause the threshold to not decay over time.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.cypher.runtime": {
                        "desc": "Set this to specify the default runtime for the default language version.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.cypher.statistics_divergence_target": {
                        "desc": "Large databases might change slowly, and so to prevent queries from never being replanned the divergence threshold set by cypher.statistics_divergence_threshold is configured to shrink over time. The algorithm used to manage this change is set by cypher.statistics_divergence_algorithm and will cause the threshold to reach the value set here once the time since the previous replanning has reached unsupported.cypher.target_replan_interval. Setting this value to higher than the cypher.statistics_divergence_threshold will cause the threshold to not decay over time.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.cypher.target_replan_interval": {
                        "desc": "Large databases might change slowly, and to prevent queries from never being replanned the divergence threshold set by cypher.statistics_divergence_threshold is configured to shrink over time. The algorithm used to manage this change is set by unsupported.cypher.statistics_divergence_algorithm and will cause the threshold to reach the value set by unsupported.cypher.statistics_divergence_target once the time since the previous replanning has reached the value set here. Setting this value to less than the value of cypher.min_replan_interval will cause the threshold to not decay over time.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.block_size.array_properties": {
                        "desc": "Specifies the block size for storing arrays. This parameter is only honored when the store is created, otherwise it is ignored. Also note that each block carries a ~10B of overhead so record size on disk will be slightly larger than the configured block size",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.block_size.labels": {
                        "desc": "Specifies the block size for storing labels exceeding in-lined space in node record. This parameter is only honored when the store is created, otherwise it is ignored. Also note that each block carries a ~10B of overhead so record size on disk will be slightly larger than the configured block size",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.block_size.strings": {
                        "desc": "Specifies the block size for storing strings. This parameter is only honored when the store is created, otherwise it is ignored. Note that each character in a string occupies two bytes, meaning that e.g a block size of 120 will hold a 60 character long string before overflowing into a second block. Also note that each block carries a ~10B of overhead so record size on disk will be slightly larger than the configured block size",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.console_module.enabled": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.console_module.engines": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.counts_store_rotation_timeout": {
                        "desc": "Maximum time to wait for active transaction completion when rotating counts store",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.directories.auth": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.directories.database": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.directories.neo4j_home": {
                        "desc": "Root relative to which directory settings are resolved. This is set in code and should never be configured explicitly.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.disconnected": {
                        "desc": "Disable all protocol connectors.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.edition": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.enable_native_schema_index": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.ephemeral": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.executiontime_limit.enabled": {
                        "desc": "Please use dbms.transaction.timeout instead.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.executiontime_limit.time": {
                        "desc": "If execution time limiting is enabled in the database, this configures the maximum request execution time. Please use dbms.transaction.timeout instead.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.gc_monitor_threshold": {
                        "desc": "The amount of time in ms the monitor thread has to be blocked before logging a message it was blocked.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.gc_monitor_wait_time": {
                        "desc": "Amount of time in ms the GC monitor thread will wait before taking another measurement.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.id_generator_fast_rebuild_enabled": {
                        "desc": "Use a quick approach for rebuilding the ID generators. This give quicker recovery time, but will limit the ability to reuse the space of deleted entities.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.id_reuse_safe_zone": {
                        "desc": "Duration for which master will buffer ids and not reuse them to allow slaves read consistently. Slaves will also terminate transactions longer than this duration, when applying received transaction stream, to make sure they do not read potentially inconsistent/reused records.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.index.archive_failed": {
                        "desc": "Create an archive of an index before re-creating it if failing to load on startup.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.jmx_module.enabled": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.kernel_id": {
                        "desc": "An identifier that uniquely identifies this graph database instance within this JVM. Defaults to an auto-generated number depending on how many instance are started in this JVM.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.lock_manager": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.logs.bolt.enabled": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.logs.bolt.path": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.logs.debug.debug_loggers": {
                        "desc": "Debug log contexts that should output debug level logging",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.max_http_request_header_size": {
                        "desc": "Maximum request header size",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.max_http_response_header_size": {
                        "desc": "Maximum response header size",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.memory.pagecache.pagesize": {
                        "desc": "Target size for pages of mapped memory. If set to 0, then a reasonable default is chosen, depending on the storage device used.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.multi_threaded_schema_index_population_enabled": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.record_id_batch_size": {
                        "desc": "Specifies the size of id batches local to each transaction when committing. Committing a transaction which contains changes most often results in new data records being created. For each record a new id needs to be generated from an id generator. It's more efficient to allocate a batch of ids from the contended id generator, which the transaction holds and generates ids from while creating these new records. This setting specifies how big those batches are. Remaining ids are freed back to id generator on clean shutdown.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.report_configuration": {
                        "desc": "Print out the effective Neo4j configuration after startup.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.schema.release_lock_while_building_constraint": {
                        "desc": "Whether or not to release the exclusive schema lock is while building uniqueness constraints index",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.security.auth_max_failed_attempts": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.security.auth_store.location": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.security.ldap.authorization.connection_pooling": {
                        "desc": "Set to true if connection pooling should be used for authorization searches using the system account.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.security.module": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.security.script_sandboxing_enabled": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.security.tls_certificate_file": {
                        "desc": "Path to the X.509 public certificate to be used by Neo4j for TLS connections",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.security.tls_key_file": {
                        "desc": "Path to the X.509 private key to be used by Neo4j for TLS connections",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.tracer": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.transaction_start_timeout": {
                        "desc": "The maximum amount of time to wait for the database to become available, when starting a new transaction.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.udc.first_delay": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.udc.host": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.udc.interval": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.udc.reg": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.udc.source": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.uris.browser": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.uris.management": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.uris.rest": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.dbms.wadl_generation_enabled": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.ha.cluster_name": {
                        "desc": "The name of a cluster.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.ha.instance_name": {
                        "desc": "Configuration attribute",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "unsupported.tools.batch_inserter.batch_size": {
                        "desc": "Specifies number of operations that batch inserter will try to group into one batch before flushing data into underlying storage.",
                        "rw": false,
                        "type": "java.lang.String"
                    }
                },
                "class": "org.neo4j.jmx.impl.ConfigurationBean",
                "desc": "The configuration parameters used to configure Neo4j"
            },
            "instance=kernel#0,name=Diagnostics": {
                "attr": {
                    "DiagnosticsProviders": {
                        "desc": "A list of the ids for the registered diagnostics providers.",
                        "rw": false,
                        "type": "java.util.List"
                    }
                },
                "class": "org.neo4j.management.Diagnostics",
                "desc": "Diagnostics provided by Neo4j",
                "op": {
                    "dumpAll": {
                        "args": [],
                        "desc": "Dump diagnostics information to JMX",
                        "ret": "java.lang.String"
                    },
                    "dumpToLog": [
                        {
                            "args": [],
                            "desc": "Dump diagnostics information to the log.",
                            "ret": "void"
                        },
                        {
                            "args": [
                                {
                                    "desc": "",
                                    "name": "p1",
                                    "type": "java.lang.String"
                                }
                            ],
                            "desc": "Dump diagnostics information to the log.",
                            "ret": "void"
                        }
                    ],
                    "extract": {
                        "args": [
                            {
                                "desc": "",
                                "name": "p1",
                                "type": "java.lang.String"
                            }
                        ],
                        "desc": "Operation exposed for management",
                        "ret": "java.lang.String"
                    }
                }
            },
            "instance=kernel#0,name=Index sampler": {
                "class": "org.neo4j.management.IndexSamplingManager",
                "desc": "Handle index sampling.",
                "op": {
                    "triggerIndexSampling": {
                        "args": [
                            {
                                "desc": "p0",
                                "name": "p0",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "p1",
                                "name": "p1",
                                "type": "java.lang.String"
                            },
                            {
                                "desc": "p2",
                                "name": "p2",
                                "type": "boolean"
                            }
                        ],
                        "desc": "triggerIndexSampling",
                        "ret": "void"
                    }
                }
            },
            "instance=kernel#0,name=Kernel": {
                "attr": {
                    "DatabaseName": {
                        "desc": "The name of the mounted database",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "KernelStartTime": {
                        "desc": "The time from which this Neo4j instance was in operational mode.",
                        "rw": false,
                        "type": "java.util.Date"
                    },
                    "KernelVersion": {
                        "desc": "The version of Neo4j",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "MBeanQuery": {
                        "desc": "An ObjectName that can be used as a query for getting all management beans for this Neo4j instance.",
                        "rw": false,
                        "type": "javax.management.ObjectName"
                    },
                    "ReadOnly": {
                        "desc": "Whether this is a read only instance",
                        "rw": false,
                        "type": "boolean"
                    },
                    "StoreCreationDate": {
                        "desc": "The time when this Neo4j graph store was created.",
                        "rw": false,
                        "type": "java.util.Date"
                    },
                    "StoreId": {
                        "desc": "An identifier that, together with store creation time, uniquely identifies this Neo4j graph store.",
                        "rw": false,
                        "type": "java.lang.String"
                    },
                    "StoreLogVersion": {
                        "desc": "The current version of the Neo4j store logical log.",
                        "rw": false,
                        "type": "long"
                    }
                },
                "class": "org.neo4j.jmx.Kernel",
                "desc": "Information about the Neo4j kernel"
            },
            "instance=kernel#0,name=Locking": {
                "attr": {
                    "Locks": {
                        "desc": "Information about all locks held by Neo4j",
                        "rw": false,
                        "type": "[Ljavax.management.openmbean.CompositeData;"
                    },
                    "NumberOfAvertedDeadlocks": {
                        "desc": "The number of lock sequences that would have lead to a deadlock situation that Neo4j has detected and averted (by throwing DeadlockDetectedException).",
                        "rw": false,
                        "type": "long"
                    }
                },
                "class": "org.neo4j.management.LockManager",
                "desc": "Information about the Neo4j lock status",
                "op": {
                    "getContendedLocks": {
                        "args": [
                            {
                                "desc": "p0",
                                "name": "p0",
                                "type": "long"
                            }
                        ],
                        "desc": "getContendedLocks",
                        "ret": "[Ljavax.management.openmbean.CompositeData;"
                    }
                }
            },
            "instance=kernel#0,name=Memory Mapping": {
                "attr": {
                    "MemoryPools": {
                        "desc": "Get information about each pool of memory mapped regions from store files with memory mapping enabled",
                        "rw": false,
                        "type": "[Ljavax.management.openmbean.CompositeData;"
                    }
                },
                "class": "org.neo4j.management.MemoryMapping",
                "desc": "The status of Neo4j memory mapping"
            },
            "instance=kernel#0,name=Page cache": {
                "attr": {
                    "BytesRead": {
                        "desc": "Number of bytes read from durable storage.",
                        "rw": false,
                        "type": "long"
                    },
                    "BytesWritten": {
                        "desc": "Number of bytes written to durable storage.",
                        "rw": false,
                        "type": "long"
                    },
                    "EvictionExceptions": {
                        "desc": "Number of exceptions caught during page eviction. This number should be zero, or at least not growing, in a healthy database. Otherwise it could indicate drive failure, storage space, or permission problems.",
                        "rw": false,
                        "type": "long"
                    },
                    "Evictions": {
                        "desc": "Number of page evictions. How many pages have been removed from memory to make room for other pages.",
                        "rw": false,
                        "type": "long"
                    },
                    "Faults": {
                        "desc": "Number of page faults. How often requested data was not found in memory and had to be loaded.",
                        "rw": false,
                        "type": "long"
                    },
                    "FileMappings": {
                        "desc": "Number of files that have been mapped into the page cache.",
                        "rw": false,
                        "type": "long"
                    },
                    "FileUnmappings": {
                        "desc": "Number of files that have been unmapped from the page cache.",
                        "rw": false,
                        "type": "long"
                    },
                    "Flushes": {
                        "desc": "Number of page flushes. How many dirty pages have been written to durable storage.",
                        "rw": false,
                        "type": "long"
                    },
                    "Pins": {
                        "desc": "Number of page pins. How many pages have been accessed (monitoring must be enabled separately).",
                        "rw": false,
                        "type": "long"
                    }
                },
                "class": "org.neo4j.management.PageCache",
                "desc": "Information about the Neo4j page cache. All numbers are counts and sums since the Neo4j instance was started"
            },
            "instance=kernel#0,name=Primitive count": {
                "attr": {
                    "NumberOfNodeIdsInUse": {
                        "desc": "An estimation of the number of nodes used in this Neo4j instance",
                        "rw": false,
                        "type": "long"
                    },
                    "NumberOfPropertyIdsInUse": {
                        "desc": "An estimation of the number of properties used in this Neo4j instance",
                        "rw": false,
                        "type": "long"
                    },
                    "NumberOfRelationshipIdsInUse": {
                        "desc": "An estimation of the number of relationships used in this Neo4j instance",
                        "rw": false,
                        "type": "long"
                    },
                    "NumberOfRelationshipTypeIdsInUse": {
                        "desc": "The number of relationship types used in this Neo4j instance",
                        "rw": false,
                        "type": "long"
                    }
                },
                "class": "org.neo4j.jmx.Primitives",
                "desc": "Estimates of the numbers of different kinds of Neo4j primitives"
            },
            "instance=kernel#0,name=Store file sizes": {
                "attr": {
                    "ArrayStoreSize": {
                        "desc": "The amount of disk space used to store array properties, in bytes.",
                        "rw": false,
                        "type": "long"
                    },
                    "LogicalLogSize": {
                        "desc": "The amount of disk space used by the current Neo4j logical log, in bytes.",
                        "rw": false,
                        "type": "long"
                    },
                    "NodeStoreSize": {
                        "desc": "The amount of disk space used to store nodes, in bytes.",
                        "rw": false,
                        "type": "long"
                    },
                    "PropertyStoreSize": {
                        "desc": "The amount of disk space used to store properties (excluding string values and array values), in bytes.",
                        "rw": false,
                        "type": "long"
                    },
                    "RelationshipStoreSize": {
                        "desc": "The amount of disk space used to store relationships, in bytes.",
                        "rw": false,
                        "type": "long"
                    },
                    "StringStoreSize": {
                        "desc": "The amount of disk space used to store string properties, in bytes.",
                        "rw": false,
                        "type": "long"
                    },
                    "TotalStoreSize": {
                        "desc": "The total disk space used by this Neo4j instance, in bytes.",
                        "rw": false,
                        "type": "long"
                    }
                },
                "class": "org.neo4j.jmx.StoreFile",
                "desc": "This bean is deprecated, use StoreSize bean instead; Information about the sizes of the different parts of the Neo4j graph store"
            },
            "instance=kernel#0,name=Store sizes": {
                "attr": {
                    "ArrayStoreSize": {
                        "desc": "Disk space used to store array properties, in bytes.",
                        "rw": false,
                        "type": "long"
                    },
                    "CountStoreSize": {
                        "desc": "Disk space used to store counters, in bytes",
                        "rw": false,
                        "type": "long"
                    },
                    "IndexStoreSize": {
                        "desc": "Disk space used to store all indices, in bytes",
                        "rw": false,
                        "type": "long"
                    },
                    "LabelStoreSize": {
                        "desc": "Disk space used to store labels, in bytes",
                        "rw": false,
                        "type": "long"
                    },
                    "NodeStoreSize": {
                        "desc": "Disk space used to store nodes, in bytes.",
                        "rw": false,
                        "type": "long"
                    },
                    "PropertyStoreSize": {
                        "desc": "Disk space used to store properties (excluding string values and array values), in bytes.",
                        "rw": false,
                        "type": "long"
                    },
                    "RelationshipStoreSize": {
                        "desc": "Disk space used to store relationships, in bytes.",
                        "rw": false,
                        "type": "long"
                    },
                    "SchemaStoreSize": {
                        "desc": "Disk space used to store schemas (index and constrain declarations), in bytes",
                        "rw": false,
                        "type": "long"
                    },
                    "StringStoreSize": {
                        "desc": "Disk space used to store string properties, in bytes.",
                        "rw": false,
                        "type": "long"
                    },
                    "TotalStoreSize": {
                        "desc": "Disk space used by whole store, in bytes.",
                        "rw": false,
                        "type": "long"
                    },
                    "TransactionLogsSize": {
                        "desc": "Disk space used by the transaction logs, in bytes.",
                        "rw": false,
                        "type": "long"
                    }
                },
                "class": "org.neo4j.jmx.StoreSize",
                "desc": "Information about the disk space used by different parts of the Neo4j graph store"
            },
            "instance=kernel#0,name=Transactions": {
                "attr": {
                    "LastCommittedTxId": {
                        "desc": "The id of the latest committed transaction",
                        "rw": false,
                        "type": "long"
                    },
                    "NumberOfCommittedTransactions": {
                        "desc": "The total number of committed transactions",
                        "rw": false,
                        "type": "long"
                    },
                    "NumberOfOpenTransactions": {
                        "desc": "The number of currently open transactions",
                        "rw": false,
                        "type": "long"
                    },
                    "NumberOfOpenedTransactions": {
                        "desc": "The total number started transactions",
                        "rw": false,
                        "type": "long"
                    },
                    "NumberOfRolledBackTransactions": {
                        "desc": "The total number of rolled back transactions",
                        "rw": false,
                        "type": "long"
                    },
                    "PeakNumberOfConcurrentTransactions": {
                        "desc": "The highest number of transactions ever opened concurrently",
                        "rw": false,
                        "type": "long"
                    }
                },
                "class": "org.neo4j.management.TransactionManager",
                "desc": "Information about the Neo4j transaction manager"
            }
        },
        "org.neo4j.ServerManagement": {
            "restartServer=lifecycle": {
                "class": "org.neo4j.server.enterprise.jmx.ServerManagement",
                "desc": "Information on the management interface of the MBean",
                "op": {
                    "restartServer": {
                        "args": [],
                        "desc": "Operation exposed for management",
                        "ret": "void"
                    }
                }
            }
        }
    }
}
